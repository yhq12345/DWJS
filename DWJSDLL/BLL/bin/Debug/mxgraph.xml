<?xml version="1.0"?>
<doc>
    <assembly>
        <name>mxgraph</name>
    </assembly>
    <members>
        <member name="T:com.mxgraph.mxRectangle">
            <summary>
            Implements a 2-dimensional rectangle with double precision coordinates.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxPoint">
            <summary>
            Implements a 2-dimensional point with double precision coordinates.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxPoint.x">
            <summary>
            Holds the x-coordinate of the point. Default is 0.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxPoint.y">
            <summary>
            Holds the y-coordinate of the point. Default is 0.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxPoint.#ctor">
            <summary>
            Constructs a new point at (0, 0).
            </summary>
        </member>
        <member name="M:com.mxgraph.mxPoint.#ctor(System.Drawing.Point)">
            <summary>
            Constructs a new point at the location of the given point.
            </summary>
            <param name="point">Point that specifies the location.</param>
        </member>
        <member name="M:com.mxgraph.mxPoint.#ctor(com.mxgraph.mxPoint)">
            <summary>
            Constructs a new point at the location of the given point.
            </summary>
            <param name="point">Point that specifies the location.</param>
        </member>
        <member name="M:com.mxgraph.mxPoint.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a new point at (x, y).
            </summary>
            <param name="x">X-coordinate of the point to be created.</param>
            <param name="y">Y-coordinate of the point to be created.</param>
        </member>
        <member name="M:com.mxgraph.mxPoint.GetPoint">
            <summary>
            Returns the coordinates as a new point.
            </summary>
            <returns>Returns a new point for the location.</returns>
        </member>
        <member name="M:com.mxgraph.mxPoint.Equals(System.Object)">
            <summary>
            Returns true if the given object equals this point.
            </summary>
            <returns>Returns true if obj is equal.</returns>
        </member>
        <member name="M:com.mxgraph.mxPoint.Clone">
            <summary>
            Returns a new instance of the same point.
            </summary>
            <returns>Returns a clone of the point.</returns>
        </member>
        <member name="P:com.mxgraph.mxPoint.X">
            <summary>
            Sets or returns the x-coordinate of the point.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxPoint.Y">
            <summary>
            Sets or returns the y-coordinate of the point.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxRectangle.width">
            <summary>
            Holds the width. Default is 0.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxRectangle.height">
            <summary>
            Holds the height. Default is 0.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxRectangle.#ctor">
            <summary>
            Constructs a new rectangle at (0, 0) with the width and height set to 0.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxRectangle.#ctor(com.mxgraph.mxRectangle)">
            <summary>
            Constructs a copy of the given rectangle.
            </summary>
            <param name="rect">Rectangle to construct a copy of.</param>
        </member>
        <member name="M:com.mxgraph.mxRectangle.#ctor(System.Drawing.Rectangle)">
            <summary>
            Constructs a copy of the given rectangle.
            </summary>
            <param name="rect">Rectangle to construct a copy of.</param>
        </member>
        <member name="M:com.mxgraph.mxRectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a rectangle using the given parameters.
            </summary>
            <param name="x">X-coordinate of the new rectangle.</param>
            <param name="y">Y-coordinate of the new rectangle.</param>
            <param name="width">Width of the new rectangle.</param>
            <param name="height">Height of the new rectangle.</param>
        </member>
        <member name="M:com.mxgraph.mxRectangle.setRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets this rectangle to the specified values
            </summary>
        </member>
        <member name="M:com.mxgraph.mxRectangle.GetCenterX">
            <summary>
            Returns the x-coordinate of the center.
            </summary>
            <returns>Returns the x-coordinate of the center.</returns>
        </member>
        <member name="M:com.mxgraph.mxRectangle.GetCenterY">
            <summary>
            Returns the y-coordinate of the center.
            </summary>
            <returns>Returns the y-coordinate of the center.</returns>
        </member>
        <member name="M:com.mxgraph.mxRectangle.Add(com.mxgraph.mxRectangle)">
            <summary>
            Adds the given rectangle to this rectangle.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxRectangle.Grow(System.Double)">
            <summary>
            Grows the rectangle by the given amount, that is, this method subtracts
            the given amount from the x- and y-coordinates and adds twice the amount
            to the width and height.
            </summary>
            <param name="amount">Amount by which the rectangle should be grown.</param>
        </member>
        <member name="M:com.mxgraph.mxRectangle.Contains(System.Double,System.Double)">
            <summary>
            Returns true if this rectangle contains the given point (x, y).
            </summary>
            <param name="x">X-coordinate of the point.</param>
            <param name="y">Y-coordinate of the point.</param>
            <returns>Returns true if (x, y) lies within the given area.</returns>
        </member>
        <member name="M:com.mxgraph.mxRectangle.GetRectangle">
            <summary>
            Returns the bounds as a new rectangle.
            </summary>
            <returns>Returns a new rectangle for the bounds.</returns>
        </member>
        <member name="M:com.mxgraph.mxRectangle.Equals(System.Object)">
            <summary>
            Returns true if the given object equals this rectangle.
            </summary>
            <returns>Returns true if obj is equal.</returns>
        </member>
        <member name="M:com.mxgraph.mxRectangle.Clone">
            <summary>
            Returns a new instance of the same rectangle.
            </summary>
            <returns>Returns a clone of the rectangle.</returns>
        </member>
        <member name="P:com.mxgraph.mxRectangle.Width">
            <summary>
            Sets or returns the width of the rectangle.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxRectangle.Height">
            <summary>
            Sets or returns the height of the rectangle.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxGraphViewImageReader">
            <summary>
            A converter that renders display XML data onto a GDI canvas.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxGraphViewReader">
            <summary>
            An abstract converter that renders display XML data onto a canvas.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraphViewReader.canvas">
            <summary>
            Holds the canvas to be used for rendering the graph.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraphViewReader.scale">
            <summary>
            Holds the global scale of the graph. This is set just before
            createCanvas is called.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphViewReader.#ctor">
            <summary>
            Constructs a new graph view reader.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphViewReader.#ctor(System.Xml.XmlReader)">
            <summary>
            Constructs a new graph view reader and reads the given display XML data.
            </summary>
            <param name="reader">Reader that represents the display XML data.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphViewReader.CreateCanvas(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns the canvas to be used for rendering.
            </summary>
            <param name="attrs">Specifies the attributes of the new canvas.</param>
            <returns>Returns a new canvas.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraphViewReader.Read(System.Xml.XmlReader)">
            <summary>
            Reads the given display XML data and parses all elements.
            </summary>
            <param name="reader">Reader that represents the display XML data.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphViewReader.ParseElement(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Parses the given element and paints it onto the canvas.
            </summary>
            <param name="tagName">Name of the node to be parsed.</param>
            <param name="attrs">Attributes of the node to be parsed.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphViewReader.ParseState(com.mxgraph.mxCellState,System.Boolean)">
            <summary>
            Parses the bounds, absolute points and label information from the style
            of the state into its respective fields and returns the label of the
            cell.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphViewReader.ParsePoints(System.String)">
            <summary>
            Parses the list of points into an object-oriented representation.
            </summary>
            <param name="pts">String containing a list of points.</param>
            <returns>Returns the points as a list of mxPoints.</returns>
        </member>
        <member name="P:com.mxgraph.mxGraphViewReader.Canvas">
            <summary>
            Returns the canvas that is used for rendering the graph.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraphViewImageReader.background">
            <summary>
            Specifies the background color.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraphViewImageReader.border">
            <summary>
            Specifies the border size. Default is 0.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraphViewImageReader.antiAlias">
            <summary>
            Default is true.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraphViewImageReader.cropping">
            <summary>
            Default is true.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraphViewImageReader.clip">
            <summary>
            Specifies the optional clipping rectangle.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphViewImageReader.#ctor(System.Xml.XmlReader)">
            <summary>
            Constructs a new GDI reader for the given display XML reader.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:com.mxgraph.mxGraphViewImageReader.#ctor(System.Xml.XmlReader,System.Nullable{System.Drawing.Color})">
            <summary>
            Constructs a new GDI reader for the given display XML reader.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphViewImageReader.#ctor(System.Xml.XmlReader,System.Nullable{System.Drawing.Color},System.Int32)">
            <summary>
            Constructs a new GDI reader for the given display XML reader.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphViewImageReader.#ctor(System.Xml.XmlReader,System.Nullable{System.Drawing.Color},System.Int32,System.Boolean)">
            <summary>
            Constructs a new GDI reader for the given display XML reader.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphViewImageReader.#ctor(System.Xml.XmlReader,System.Nullable{System.Drawing.Color},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new GDI reader for the given display XML reader.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphViewImageReader.Convert(com.mxgraph.mxGraphViewImageReader)">
            <summary>
            Creates the image for the given display XML reader. For a given XmlReader,
            use the following code to create the view reader:
            new mxGraphViewImageReader(xmlReader, background, border, antiAlias);
            </summary>
            <param name="viewReader">Reader that contains the display XML.</param>
            <returns>Returns an image representing the display XML reader.</returns>
        </member>
        <member name="P:com.mxgraph.mxGraphViewImageReader.Background">
            <summary>
            Accessors for the background property.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGraphViewImageReader.Border">
            <summary>
            Accessors for the border property.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGraphViewImageReader.AntiAlias">
            <summary>
            Accessors for the background property.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGraphViewImageReader.Cropping">
            <summary>
            Accessors for the cropping property.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGraphViewImageReader.Clip">
            <summary>
            Accessors for the clip property.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxConnectionConstraint">
            <summary>
            Defines an object that contains the constraints about how to connect one
            side of an edge to its terminal.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConnectionConstraint.point">
            <summary>
            Point that specifies the fixed location of the connection point.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConnectionConstraint.perimeter">
            <summary>
            Boolean that specifies if the point should be projected onto the perimeter
            of the terminal.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxConnectionConstraint.#ctor">
            <summary>
            Constructs an empty connection constraint.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxConnectionConstraint.#ctor(com.mxgraph.mxPoint)">
            <summary>
            Constructs a connection constraint for the given point.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxConnectionConstraint.#ctor(com.mxgraph.mxPoint,System.Boolean)">
            <summary>
            Constructs a new connection constraint for the given point and boolean
            arguments.
            </summary>
            <param name="point">Optional mxPoint that specifies the fixed location of the point
            in relative coordinates. Default is null.</param>
            <param name="perimeter">Optional boolean that specifies if the fixed point should be
            projected onto the perimeter of the terminal. Default is true.</param>
        </member>
        <member name="P:com.mxgraph.mxConnectionConstraint.Point">
            <summary>
            Sets or returns the point.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxConnectionConstraint.Perimeter">
            <summary>
            Sets or returns perimeter.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxStylesheetCodec">
            <summary>
            Codec for mxStylesheets. This class is created and registered
            dynamically at load time and used implicitely via mxCodec
            and the mxCodecRegistry.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxObjectCodec">
            <summary>
            Generic codec for C# objects. See below for a detailed description of
            the encoding/decoding scheme.
            Note: Since booleans are numbers in JavaScript, all boolean values are
            encoded into 1 for true and 0 for false.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxObjectCodec.EMPTY_SET">
            <summary>
            Immutable empty set.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxObjectCodec.template">
            <summary>
            Holds the template object associated with this codec.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxObjectCodec.exclude">
            <summary>
            Array containing the variable names that should be
            ignored by the codec.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxObjectCodec.idrefs">
            <summary>
            Array containing the variable names that should be
            turned into or converted from references. See
            mxCodec.getId and mxCodec.getObject.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxObjectCodec.mapping">
            <summary>
            Maps from from fieldnames to XML attribute names.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxObjectCodec.reverse">
            <summary>
            Maps from from XML attribute names to fieldnames.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.#ctor(System.Object)">
            <summary>
            Constructs a new codec for the specified template object.
            </summary>
            <param name="template">Prototypical instance of the object to be encoded/decoded.</param>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.#ctor(System.Object,System.String[],System.String[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructs a new codec for the specified template object.
            The variables in the optional exclude array are ignored by
            the codec. Variables in the optional idrefs array are
            turned into references in the XML. The optional mapping
            may be used to map from variable names to XML attributes.
            </summary>
            <param name="template">Prototypical instance of the object to be encoded/decoded.</param>
            <param name="exclude">Optional array of fieldnames to be ignored.</param>
            <param name="idrefs">Optional array of fieldnames to be converted to/from references.</param>
            <param name="mapping">Optional mapping from field- to attributenames.</param>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.GetName">
            <summary>
            Returns the name used for the nodenames and lookup of the codec when
            classes are encoded and nodes are decoded. For classes to work with
            this the codec registry automatically adds an alias for the classname
            if that is different than what this returns. The default implementation
            returns the classname of the template class.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.CloneTemplate(System.Xml.XmlNode)">
            <summary>
            Returns a new instance of the template object for representing the given
            node.
            </summary>
            <param name="node">XML node that the object is going to represent.</param>
            <returns>Returns a new template instance.</returns>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.IsExcluded(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            Returns true if the given attribute is to be ignored
            by the codec. This implementation returns true if the
            given fieldname is in exclude.
            </summary>
            <param name="obj">Object instance that contains the field.</param>
            <param name="attr">Fieldname of the field.</param>
            <param name="value">Value of the field.</param>
            <param name="write">Boolean indicating if the field is being encoded or
            decoded. write is true if the field is being encoded, else it is
            being decoded.</param>
            <returns>Returns true if the given attribute should be ignored.</returns>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.IsReference(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            Returns true if the given fieldname is to be treated
            as a textual reference (ID). This implementation returns
            true if the given fieldname is in idrefs.
            </summary>
            <param name="obj">Object instance that contains the field.</param>
            <param name="attr">Fieldname of the field.</param>
            <param name="value">Value of the field.</param>
            <param name="write">Boolean indicating if the field is being encoded or
            decoded. write is true if the field is being encoded, else it is being
            decoded.</param>
            <returns>Returns true if the given attribute should be handled as a
            reference.</returns>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.Encode(com.mxgraph.mxCodec,System.Object)">
            <summary>
            Encodes the specified object and returns a node
            representing then given object. Calls beforeEncode
            after creating the node and afterEncode with the 
            resulting node after processing.
            Enc is a reference to the calling encoder. It is used
            to encode complex objects and create references.
            </summary>
            <param name="enc">Codec that controls the encoding process.</param>
            <param name="obj">Object to be encoded.</param>
            <returns>Returns the resulting XML node that represents the given object.</returns>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.EncodeObject(com.mxgraph.mxCodec,System.Object,System.Xml.XmlNode)">
            <summary>
             Encodes the value of each member in then given obj
             into the given node using encodeFields and encodeElements.
            </summary>
            <param name="enc">Codec that controls the encoding process.</param>
            <param name="obj">Object to be encoded.</param>
            <param name="node">XML node that contains the encoded object.</param>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.EncodeFields(com.mxgraph.mxCodec,System.Object,System.Xml.XmlNode)">
            <summary>
            Encodes the members of the given object into the given node.
            </summary>
            <param name="enc">Codec that controls the encoding process.</param>
            <param name="obj">Object whose fields should be encoded.</param>
            <param name="node">XML node that contains the encoded object.</param>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.EncodeElements(com.mxgraph.mxCodec,System.Object,System.Xml.XmlNode)">
            <summary>
            Encodes the child objects of arrays, dictionaries and enumerables.
            </summary>
            <param name="enc">Codec that controls the encoding process.</param>
            <param name="obj">Object whose child objects should be encoded.</param>
            <param name="node">XML node that contains the encoded object.</param>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.EncodeValue(com.mxgraph.mxCodec,System.Object,System.String,System.Object,System.Xml.XmlNode)">
            <summary>
            Converts the given value according to the mappings and id-refs in
            this codec and uses writeAttribute to write the attribute into the
            given node.
            </summary>
            <param name="enc">Codec that controls the encoding process.</param>
            <param name="obj">Object whose member is going to be encoded.</param>
            <param name="fieldname"></param>
            <param name="value">Value of the property to be encoded.</param>
            <param name="node">XML node that contains the encoded object.</param>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.IsPrimitiveValue(System.Object)">
            <summary>
            Returns true if the given object is a primitive value.
            </summary>
            <param name="value">Object that should be checked.</param>
            <returns>Returns true if the given object is a primitive value.</returns>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.WriteAttribute(com.mxgraph.mxCodec,System.Object,System.String,System.Object,System.Xml.XmlNode)">
            <summary>
            Writes the given value into node using writePrimitiveAttribute
            or writeComplexAttribute depending on the type of the value.
            </summary>
            
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.WritePrimitiveAttribute(com.mxgraph.mxCodec,System.Object,System.String,System.Object,System.Xml.XmlNode)">
            <summary>
            Writes the given value as an attribute of the given node.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.WriteComplexAttribute(com.mxgraph.mxCodec,System.Object,System.String,System.Object,System.Xml.XmlNode)">
            <summary>
            Writes the given value as a child node of the given node.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.ConvertValueToXml(System.Object)">
            <summary>
            Converts true to "1" and false to "0". All other values are ignored.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.ConvertValueFromXml(System.Type,System.Object)">
            <summary>
            Converts XML attribute values to object of the given type.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.GetAttributeName(System.String)">
            <summary>
            Returns the XML node attribute name for the given C# field name.
            That is, it returns the mapping of the field name.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.GetFieldName(System.String)">
            <summary>
            Returns the C# field name for the given XML attribute
            name. That is, it returns the reverse mapping of the
            attribute name.
            </summary>
            <param name="attributename">The attribute name to be mapped.</param>
            <returns>String that represents the mapped field name.</returns>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.GetFieldValue(System.Object,System.String)">
            <summary>
            Returns the value of the field with the specified name
            in the specified object instance.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.SetFieldValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of the field with the specified name
            in the specified object instance.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.BeforeEncode(com.mxgraph.mxCodec,System.Object,System.Xml.XmlNode)">
            <summary>
            Hook for subclassers to pre-process the object before
            encoding. This returns the input object. The return
            value of this function is used in encode to perform
            the default encoding into the given node.
            </summary>
            <param name="enc">Codec that controls the encoding process.</param>
            <param name="obj">Object to be encoded.</param>
            <param name="node">XML node to encode the object into.</param>
            <returns>Returns the object to be encoded by the default encoding.</returns>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.AfterEncode(com.mxgraph.mxCodec,System.Object,System.Xml.XmlNode)">
            <summary>
            Hook for subclassers to Receive-process the node
            for the given object after encoding and return the
            Receive-processed node. This implementation returns
            the input node. The return value of this method
            is returned to the encoder from encode.
            </summary>
            <param name="enc">Codec that controls the encoding process.</param>
            <param name="obj">Object to be encoded.</param>
            <param name="node">XML node that represents the default encoding.</param>
            <returns>Returns the resulting node of the encoding.</returns>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.Decode(com.mxgraph.mxCodec,System.Xml.XmlNode)">
            <summary>
            Parses the given node into the object or returns a new object
            representing the given node.
            </summary>
            <param name="dec">Codec that controls the encoding process.</param>
            <param name="node">XML node to be decoded.</param>
            <returns>Returns the resulting object that represents the given XML node.</returns>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.Decode(com.mxgraph.mxCodec,System.Xml.XmlNode,System.Object)">
            <summary>
            Parses the given node into the object or returns a new object
            representing the given node.
            Dec is a reference to the calling decoder. It is used to decode
            complex objects and resolve references.
            If a node has an id attribute then the object cache is checked for the
            object. If the object is not yet in the cache then it is constructed
            using the constructor of template and cached in mxCodec.objects.
            This implementation decodes all attributes and childs of a node
            according to the following rules:
            - If the variable name is in exclude or if the attribute name is "id"
            or "as" then it is ignored.
            - If the variable name is in idrefs then mxCodec.getObject is used
            to replace the reference with an object.
            - The variable name is mapped using a reverse mapping.
            - If the value has a child node, then the codec is used to create a
            child object with the variable name taken from the "as" attribute.
            - If the object is an array and the variable name is empty then the
            value or child object is appended to the array.
            - If an add child has no value or the object is not an array then
            the child text content is evaluated using mxUtils.eval.
            If no object exists for an ID in idrefs a warning is issued
            using mxLog.warn.
            Returns the resulting object that represents the given XML
            node or the configured given object.
            </summary>
            <param name="dec">Codec that controls the encoding process.</param>
            <param name="node">XML node to be decoded.</param>
            <param name="into">Optional objec to encode the node into.</param>
            <returns>Returns the resulting object that represents the given XML node
            or the object given to the method as the into parameter.</returns>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.DecodeNode(com.mxgraph.mxCodec,System.Xml.XmlNode,System.Object)">
            <summary>
            Calls decodeAttributes and decodeChildren for the given node.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.DecodeAttributes(com.mxgraph.mxCodec,System.Xml.XmlNode,System.Object)">
            <summary>
            Decodes all attributes of the given node using decodeAttribute.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.DecodeAttribute(com.mxgraph.mxCodec,System.Xml.XmlNode,System.Object)">
            <summary>
            Reads the given attribute into the specified object.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.DecodeChildren(com.mxgraph.mxCodec,System.Xml.XmlNode,System.Object)">
            <summary>
            Reads the given attribute into the specified object.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.DecodeChild(com.mxgraph.mxCodec,System.Xml.XmlNode,System.Object)">
            <summary>
            Reads the specified child into the given object.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.GetFieldTemplate(System.Object,System.String,System.Xml.XmlNode)">
            <summary>
            Returns the template instance for the given field. This returns the
            value of the field, null if the value is an array or an empty collection
            if the value is a collection. The value is then used to populate the
            field for a new instance. For strongly typed languages it may be
            required to override this to return the correct collection instance
            based on the encoded child.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.AddObjectValue(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Sets the decoded child node as a value of the given object. If the
            object is a map, then the value is added with the given fieldname as a
            key. If the fieldname is not empty, then setFieldValue is called or
            else, if the object is a collection, the value is added to the
            collection. For strongly typed languages it may be required to
            override this with the correct code to add an entry to an object.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.ProcessInclude(com.mxgraph.mxCodec,System.Xml.XmlNode,System.Object)">
            <summary>
            
            </summary>
            <param name="dec">Codec that controls the encoding/decoding process.</param>
            <param name="node">XML node to be checked.</param>
            <param name="into">Optional object to pass-thru to the codec.</param>
            <returns>Returns true if the given node was processed as an include.</returns>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.BeforeDecode(com.mxgraph.mxCodec,System.Xml.XmlNode,System.Object)">
            <summary>
            Hook for subclassers to pre-process the node for
            the specified object and return the node to be
            used for further processing by decode.
            The object is created based on the template in the
            calling method and is never null. This implementation
            returns the input node. The return value of this
            function is used in decode to perform
            the default decoding into the given object.
            </summary>
            <param name="dec">Codec that controls the decoding process.</param>
            <param name="node">XML node to be decoded.</param>
            <param name="obj">Object to encode the node into.</param>
            <returns>Returns the node used for the default decoding.</returns>
        </member>
        <member name="M:com.mxgraph.mxObjectCodec.AfterDecode(com.mxgraph.mxCodec,System.Xml.XmlNode,System.Object)">
            <summary>
            Hook for subclassers to Receive-process the object after
            decoding. This implementation returns the given object
            without any changes. The return value of this method
            is returned to the decoder from decode.
            </summary>
            <param name="dec">Codec that controls the decoding process.</param>
            <param name="node">XML node to be decoded.</param>
            <param name="obj">Object that represents the default decoding.</param>
            <returns>Returns the result of the decoding process.</returns>
        </member>
        <member name="P:com.mxgraph.mxObjectCodec.Template">
            <summary>
            Returns the template object associated with this codec.
            </summary>
            <returns>Returns the template object.</returns>
        </member>
        <member name="M:com.mxgraph.mxStylesheetCodec.#ctor">
            <summary>
            Constructs a new stylesheet codec.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxStylesheetCodec.#ctor(System.Object)">
            <summary>
            Constructs a new stylesheet codec for the given template.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxStylesheetCodec.#ctor(System.Object,System.String[],System.String[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructs a new stylesheet codec for the given arguments.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxStylesheetCodec.Encode(com.mxgraph.mxCodec,System.Object)">
            <summary>
            Encode the given mxStylesheet.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxStylesheetCodec.getStringValue(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Returns the string for encoding the given value.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxStylesheetCodec.Decode(com.mxgraph.mxCodec,System.Xml.XmlNode,System.Object)">
            <summary>
            Decodes the given mxStylesheet.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxGdiCanvas2D">
            <summary>
            Used for exporting images.
            <example>To render to an image from a given XML string, graph size and
            and background color, the following code is used:
            <code>
            Image image = mxUtils.CreateImage(width, height, background);
            Graphics g = Graphics.FromImage(image);
            g.SmoothingMode = SmoothingMode.HighQuality;
            mxSaxOutputHandler handler = new mxSaxOutputHandler(new mxGdiCanvas2D(g));
            handler.Read(new XmlTextReader(new StringReader(xml)));
            </code>
            </example>
            Text rendering is available for plain text only, with optional word wrapping.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxICanvas2D">
            <summary>
            Defines the requirements for a canvas that paints the vertices and
            edges of a graph.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.Save">
            <summary>
            Saves the current state of the canvas.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.Restore">
            <summary>
            Restores the previous state of the canvas.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.Scale(System.Double)">
            <summary>
            Uniformaly scales the canvas by the given amount.
            </summary>
            <param name="value">The new scale value.</param>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.Translate(System.Double,System.Double)">
            <summary>
            Translates the canvas by the given amount.
            </summary>
            <param name="dx">X-coordinate of the translation.</param>
            <param name="dy">Y-coordinate of the translation.</param>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.Rotate(System.Double,System.Boolean,System.Boolean,System.Double,System.Double)">
            <summary>
            Rotates the canvas by the given angle around the given center. This
            method may add rendering overhead and should be used with care.
            </summary>
            <param name="theta">Rotation angle in degrees (0 - 360).</param>
            <param name="flipH">Specifies if drawing should be flipped horizontally.</param>
            <param name="flipV">Specifies if drawing should be flipped vertically.</param>
            <param name="cx">X-coordinate of the center point.</param>
            <param name="cy">Y-coordinate of the center point.</param>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.SetGradient(System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Prepares the canvas to draw a gradient.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.SetGlassGradient(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Prepares the canvas to draw a glass gradient.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.Rect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Next fill or stroke should draw a rectangle.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.Roundrect(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Next fill or stroke should draw a round rectangle.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.Ellipse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Next fill or stroke should draw an ellipse.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.Image(System.Double,System.Double,System.Double,System.Double,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the given image.
            </summary>
        </member>
        <!-- 对于成员“M:com.mxgraph.mxICanvas2D.Text(System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:com.mxgraph.mxICanvas2D.Begin">
            <summary>
            Begins a new path.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.MoveTo(System.Double,System.Double)">
            <summary>
            Moves to the given path.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.LineTo(System.Double,System.Double)">
            <summary>
            Draws a line to the given path.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.QuadTo(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a quadratic curve to the given point.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.CurveTo(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a bezier curve to the given point.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.Close">
            <summary>
            Closes the current path.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.Stroke">
            <summary>
            Paints the outline of the current path.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.Fill">
            <summary>
            Fills the current path.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.FillAndStroke">
            <summary>
            Fills and paints the outline of the current path.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.Shadow(System.String,System.Boolean)">
            <summary>
            Paints the current path as a shadow.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICanvas2D.Clip">
            <summary>
            Uses the current path for clipping.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICanvas2D.StrokeWidth">
            <summary>
            Sets the stroke width. This should default to 1 if unset.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICanvas2D.StrokeColor">
            <summary>
            Sets the stroke color. This should default to mxConstants.NONE if unset.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICanvas2D.Dashed">
            <summary>
            Sets the dashed state. This should default to false if unset.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICanvas2D.DashPattern">
            <summary>
            Sets the dash pattern. This should default to "3 3" if unset.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICanvas2D.LineCap">
            <summary>
            Sets the linecap. This should default to "flat" if unset.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICanvas2D.LineJoin">
            <summary>
            Sets the linejoin. This should default to "miter" if unset.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICanvas2D.MiterLimit">
            <summary>
            Sets the miterlimit. This should default to 10 if unset.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICanvas2D.FontSize">
            <summary>
            Default value mxConstants.DEFAULT_FONTSIZE.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICanvas2D.FontColor">
            <summary>
            Default value "#000000".
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICanvas2D.FontFamily">
            <summary>
            Default value {@link mxConstants#DEFAULT_FONTFAMILY}.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICanvas2D.FontStyle">
            <summary>
            Default value 0. See {@link mxConstants#STYLE_FONTSTYLE}.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICanvas2D.Alpha">
            <summary>
            Default value 1. This method may add rendering overhead and should be
            used with care.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICanvas2D.FillColor">
            <summary>
            Default value {@link mxConstants#NONE}.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.graphics">
            <summary>
            Reference to the graphics instance for painting.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.state">
            <summary>
            Represents the current state of the canvas.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.stack">
            <summary>
            Stack of states for save/restore.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.currentPath">
            <summary>
            Holds the current path.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.lastPoint">
            <summary>
            Holds the last point of a moveTo or lineTo operation to determine if the
            current path is orthogonal.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.currentShadowValue">
            <summary>
            Holds the current value for the shadow color. This is used to hold the
            input value of a shadow operation. The parsing result of this value is
            cached in the global scope as it should be repeating.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.currentShadowColor">
            <summary>
            Holds the current parsed shadow color. This holds the result of parsing
            the currentShadowValue, which is an expensive operation.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.#ctor(System.Drawing.Graphics)">
            <summary>
            Constructs a new graphics export canvas.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.Save">
            <summary>
            Saves the current canvas state.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.Restore">
            <summary>
            Restores the last canvas state.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.Scale(System.Double)">
            <summary>
            Sets the given scale.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.Translate(System.Double,System.Double)">
            <summary>
            Translates the canvas.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.Rotate(System.Double,System.Boolean,System.Boolean,System.Double,System.Double)">
            <summary>
            Rotates the canvas.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.SetGradient(System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Sets the given gradient.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.ParseColor(System.String)">
            <summary>
            Helper method that uses {@link mxUtils#parseColor(String)}. Subclassers
            can override this to implement caching for frequently used colors.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.SetGlassGradient(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the given glass gradient.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.Rect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.Roundrect(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a rounded rectangle.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.Ellipse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws an ellipse.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.Image(System.Double,System.Double,System.Double,System.Double,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws an image.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)">
            <summary>
            Implements the call to the graphics API.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.LoadImage(System.String)">
            <summary>
            Loads the specified image.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.GetImageBounds(System.Drawing.Image,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns the bounds for the given image.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.GetImageSize(System.Drawing.Image)">
            <summary>
            Returns the size for the given image.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.ConfigureImageGraphics(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Creates a graphic instance for rendering an image.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.Text(System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Draws the given text.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.GetTextWidth(System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Boolean,System.Drawing.Font,System.String,System.Boolean,System.String)">
            <summary>
            Returns the width to be used to render the specifies text.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.GetVerticalTextPosition(System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Boolean,System.Drawing.Font,System.String,System.Boolean,System.String)">
            <summary>
            Default alignment is top.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.GetHorizontalTextPosition(System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Boolean,System.Drawing.Font,System.String,System.Boolean,System.String)">
            <summary>
            Default alignment is left.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.CreateStringFormat(System.String,System.String,System.Boolean)">
            <summary>
            Creates the specified string format.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.Begin">
            <summary>
            
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.MoveTo(System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.LineTo(System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.QuadTo(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.CurveTo(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.Close">
            <summary>
            Closes the current path.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.Stroke">
            <summary>
            
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.Fill">
            <summary>
            
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.FillAndStroke">
            <summary>
            
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.Shadow(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.Clip">
            <summary>
            
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.UpdateFont">
            <summary>
            
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.CreateFont(System.String,System.Drawing.FontStyle,System.Int32)">
            <summary>
            Hook for subclassers to implement font caching.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.UpdatePen">
            <summary>
            
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGdiCanvas2D.Graphics">
            <summary>
            Sets the graphics instance.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGdiCanvas2D.StrokeWidth">
            <summary>
            Sets the strokewidth.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGdiCanvas2D.StrokeColor">
            <summary>
            Caches color conversion as it is expensive.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGdiCanvas2D.Dashed">
            <summary>
            Specifies if lines are dashed.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGdiCanvas2D.DashPattern">
            <summary>
            Sets the dashpattern.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGdiCanvas2D.LineCap">
            <summary>
            Sets the linecap.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGdiCanvas2D.LineJoin">
            <summary>
            Sets the linejoin.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGdiCanvas2D.MiterLimit">
            <summary>
            Sets the miterlimit.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGdiCanvas2D.FontSize">
            <summary>
            Sets the fontsize.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGdiCanvas2D.FontColor">
            <summary>
            Sets the fontcolor.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGdiCanvas2D.FontFamily">
            <summary>
            Sets the font family.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGdiCanvas2D.FontStyle">
            <summary>
            Sets the given fontstyle.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGdiCanvas2D.Alpha">
            <summary>
            Sets the given alpha.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGdiCanvas2D.FillColor">
            <summary>
            Sets the given fillcolor.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxGdiCanvas2D.CanvasState">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.alpha">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.scale">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.dx">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.dy">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.miterLimit">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.fontStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.fontSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.fontFamily">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.fontColorValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.fontBrush">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.lineCap">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.lineJoin">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.strokeWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.strokeColorValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.strokeColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.brush">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.pen">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.font">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.dashed">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.dashPattern">
            <summary>
            
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas2D.CanvasState.state">
            <summary>
            
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas2D.CanvasState.Clone">
            <summary>
            
            </summary>
        </member>
        <member name="T:com.mxgraph.mxGeometry">
            <summary>
            Represents the geometry of a cell. For vertices, the geometry consists
            of the x- and y-location, as well as the width and height. For edges,
            the edge either defines the source- and target-terminal, or the geometry
            defines the respective terminal points.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGeometry.TRANSLATE_CONTROL_POINTS">
            <summary>
            Global switch to translate the points in translate. Default is true.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGeometry.alternateBounds">
            <summary>
            Stores alternate values for x, y, width and height in a rectangle.
            Default is null.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGeometry.sourcePoint">
            <summary>
            Defines the source-point of the edge. This is used if the
            corresponding edge does not have a source vertex. Otherwise it is
            ignored. Default is null.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGeometry.targetPoint">
            <summary>
            Defines the target-point of the edge. This is used if the
            corresponding edge does not have a source vertex. Otherwise it is
            ignored. Default is null.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGeometry.offset">
            <summary>
            Holds the offset of the label for edges. This is the absolute vector
            between the center of the edge and the top, left point of the label.
            Default is null.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGeometry.points">
            <summary>
            List of mxPoints which specifies the control points along the edge.
            These points are the intermediate points on the edge, for the endpoints
            use targetPoint and sourcePoint or set the terminals of the edge to
            a non-null value. Default is null.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGeometry.relative">
            <summary>
            Specifies if the coordinates in the geometry are to be interpreted as
            relative coordinates. Default is false. This is used to mark a geometry
            with an x- and y-coordinate that is used to describe an edge label
            position.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGeometry.#ctor">
            <summary>
            Constructs a new geometry at (0, 0) with the width and height set to 0.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGeometry.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a geometry using the given parameters.
            </summary>
            <param name="x">X-coordinate of the new geometry.</param>
            <param name="y">Y-coordinate of the new geometry.</param>
            <param name="width">Width of the new geometry.</param>
            <param name="height">Height of the new geometry.</param>
        </member>
        <member name="M:com.mxgraph.mxGeometry.#ctor(com.mxgraph.mxGeometry)">
            <summary>
            Constructs a copy of the given geometry.
            </summary>
            <param name="geometry">Geometry to construct a copy of.</param>
        </member>
        <member name="M:com.mxgraph.mxGeometry.GetTerminalPoint(System.Boolean)">
            <summary>
            Returns the point representing the source or target point of this edge.
            This is only used if the edge has no source or target vertex.
            </summary>
            <param name="source">Boolean that specifies if the source or target point
            should be returned.</param>
            <returns>Returns the source or target point.</returns>
        </member>
        <member name="M:com.mxgraph.mxGeometry.SetTerminalPoint(com.mxgraph.mxPoint,System.Boolean)">
            <summary>
            Sets the sourcePoint or targetPoint to the given point and returns the
            new point.
            </summary>
            <param name="point">Point to be used as the new source or target point.</param>
            <param name="source">Boolean that specifies if the source or target point
            should be set.</param>
            <returns>Returns the new point.</returns>
        </member>
        <member name="M:com.mxgraph.mxGeometry.Translate(System.Double,System.Double)">
            <summary>
            Translates the geometry by the specified amount. That is, x and y of the
            geometry, the sourcePoint, targetPoint and all elements of points are
            translated by the given amount. X and y are only translated if the
            geometry is not relative. If TRANSLATE_CONTROL_POINTS is false, then
            are not modified by this function.
            </summary>
            <param name="dx">Integer that specifies the x-coordinate of the translation.</param>
            <param name="dy">Integer that specifies the y-coordinate of the translation.</param>
        </member>
        <member name="M:com.mxgraph.mxGeometry.Clone">
            <summary>
            Returns a new instance of the same geometry.
            </summary>
            <returns>Returns a clone of the geometry.</returns>
        </member>
        <member name="P:com.mxgraph.mxGeometry.AlternateBounds">
            <summary>
            Sets or returns the alternate bounds.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGeometry.SourcePoint">
            <summary>
            Sets or returns the source point.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGeometry.TargetPoint">
            <summary>
            Sets or returns the target point.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGeometry.Points">
            <summary>
            Sets or returns the list of control points.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGeometry.Offset">
            <summary>
            Sets or returns the offset.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGeometry.Relative">
            <summary>
            Sets or returns if the geometry is relative.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxGdiCanvas">
            <summary>
            Implementation of a canvas that uses GDI for painting.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxBasicCanvas">
            <summary>
            Basic implementation of a canvas that draws a graph.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxICanvas">
            <summary>
            Defines the requirements for a canvas that paints the vertices and
            edges of a graph.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICanvas.DrawCell(com.mxgraph.mxCellState)">
            <summary>
            Draws the given cell.
            </summary>
            <param name="state">State of the cell to be painted.</param>
            <returns>Object that represents the vertex.</returns>
        </member>
        <member name="M:com.mxgraph.mxICanvas.DrawLabel(System.String,com.mxgraph.mxCellState,System.Boolean)">
            <summary>
            Draws the given label.
            </summary>
            <param name="text">String that represents the label.</param>
            <param name="state">State of the cell whose label is to be painted.</param>
            <param name="html">Specifies if the label contains HTML markup.</param>
            <returns>Object that represents the label.</returns>
        </member>
        <member name="P:com.mxgraph.mxICanvas.Translate">
            <summary>
            Sets or returns the user object of the cell.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICanvas.Scale">
            <summary>
            Sets or returns the user object of the cell.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxBasicCanvas.DEFAULT_IMAGEBASEPATH">
            <summary>
            Defines the default value for the imageBasePath in all GDI canvases.
            Default is an empty string.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxBasicCanvas.imageBasePath">
            <summary>
            Defines the base path for images with relative paths. Trailing slash
            is required. Default value is DEFAULT_IMAGEBASEPATH.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxBasicCanvas.translate">
            <summary>
            Specifies the current translation. Default is (0,0).
            </summary>
        </member>
        <member name="F:com.mxgraph.mxBasicCanvas.scale">
            <summary>
            Specifies the current scale. Default is 1.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxBasicCanvas.drawLabels">
            <summary>
            Specifies whether labels should be painted. Default is true.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxBasicCanvas.DrawCell(com.mxgraph.mxCellState)">
            <summary>
            see com.mxgraph.mxICanvas.DrawCell()
            </summary>
        </member>
        <member name="M:com.mxgraph.mxBasicCanvas.DrawLabel(System.String,com.mxgraph.mxCellState,System.Boolean)">
            <summary>
            see com.mxgraph.mxICanvas.DrawLabel()
            </summary>
        </member>
        <member name="M:com.mxgraph.mxBasicCanvas.GetImageForStyle(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets the image path from the given style.  If the path is relative (does
            not start with a slash) then it is appended to the imageBasePath.
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="P:com.mxgraph.mxBasicCanvas.Translate">
            <summary>
            see com.mxgraph.mxICanvas.Translate
            </summary>
        </member>
        <member name="P:com.mxgraph.mxBasicCanvas.Scale">
            <summary>
            see com.mxgraph.mxICanvas.Scale
            </summary>
        </member>
        <member name="P:com.mxgraph.mxBasicCanvas.DrawLabels">
            <summary>
            Sets if labels should be visible.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxBasicCanvas.ImageBasePath">
            <summary>
            Sets or gets the image base path.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas.PRESERVE_IMAGE_ASPECT">
            <summary>
            Specifies if image aspect should be preserved in drawImage.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas.imageCache">
            <summary>
            Cache for loading images.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGdiCanvas.g">
            <summary>
            Global graphics handle to the image.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.#ctor">
            <summary>
            Constructs a new GDI canvas.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.#ctor(System.Drawing.Graphics)">
            <summary>
            Constructs a new GDI canvas for the given graphics instance.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.LoadImage(System.String)">
            <summary>
            Returns an image instance for the given URL. If the URL has
            been loaded before than an instance of the same instance is
            returned as in the previous call.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.DrawCell(com.mxgraph.mxCellState)">
            <summary>
            see com.mxgraph.mxICanvas.DrawCell()
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.DrawLabel(System.String,com.mxgraph.mxCellState,System.Boolean)">
            <summary>
            see com.mxgraph.mxICanvas.DrawLabel()
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.DrawShape(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Draws the shape specified with the STYLE_SHAPE key in the given style.
            </summary>
            <param name="x">X-coordinate of the shape.</param>
            <param name="y">Y-coordinate of the shape.</param>
            <param name="w">Width of the shape.</param>
            <param name="h">Height of the shape.</param>
            <param name="style">Style of the the shape.</param>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.DrawGlassEffect(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Draws the glass effect.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.DrawPolygon(System.Drawing.Point[],System.Drawing.Brush,System.Drawing.Pen,System.Boolean)">
            <summary>
            Draws a a polygon for the given parameters.
            </summary>
            <param name="polygon">Points of the polygon.</param>
            <param name="brush">Optional brush for painting the background.</param>
            <param name="pen">Optional pen for painting the border.</param>
            <param name="shadow">Boolean indicating if a shadow should be painted.</param>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.DrawPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Brush,System.Drawing.Pen,System.Boolean)">
            <summary>
            Draws a path for the given parameters.
            </summary>
            <param name="path">Path object to be drawn.</param>
            <param name="brush">Optional brush for painting the background.</param>
            <param name="pen">Optional pen for painting the border.</param>
            <param name="shadow">Boolean indicating if a shadow should be painted.</param>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.DrawRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Brush,System.Drawing.Pen,System.Boolean,System.Boolean)">
            <summary>
            Draws a rectangle for the given parameters.
            </summary>
            <param name="x">X-coordinate of the shape.</param>
            <param name="y">Y-coordinate of the shape.</param>
            <param name="w">Width of the shape.</param>
            <param name="h">Height of the shape.</param>
            <param name="brush">Optional brush for painting the background.</param>
            <param name="pen">Optional pen for painting the border.</param>
            <param name="shadow">Boolean indicating if a shadow should be painted.</param>
            <param name="rounded">Boolean indicating if the rectangle is rounded.</param>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.DrawImage(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Draws an image for the given parameters.
            </summary>
            <param name="x">X-coordinate of the image.</param>
            <param name="y">Y-coordinate of the image.</param>
            <param name="w">Width of the image.</param>
            <param name="h">Height of the image.</param>
            <param name="image">URL of the image.</param>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.DrawImage(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws an image for the given parameters.
            </summary>
            <param name="x">X-coordinate of the image.</param>
            <param name="y">Y-coordinate of the image.</param>
            <param name="w">Width of the image.</param>
            <param name="h">Height of the image.</param>
            <param name="image">URL of the image.</param>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.DrawOval(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Brush,System.Drawing.Pen,System.Boolean)">
            <summary>
            Draws an oval for the given parameters.
            </summary>
            <param name="x">X-coordinate of the shape.</param>
            <param name="y">Y-coordinate of the shape.</param>
            <param name="w">Width of the shape.</param>
            <param name="h">Height of the shape.</param>
            <param name="brush">Optional brush for painting the background.</param>
            <param name="pen">Optional pen for painting the border.</param>
            <param name="shadow">Boolean indicating if a shadow should be painted.</param>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.DrawRhombus(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Brush,System.Drawing.Pen,System.Boolean)">
            <summary>
            Draws an rhombus (aka. diamond) for the given parameters.
            </summary>
            <param name="x">X-coordinate of the shape.</param>
            <param name="y">Y-coordinate of the shape.</param>
            <param name="w">Width of the shape.</param>
            <param name="h">Height of the shape.</param>
            <param name="brush">Optional brush for painting the background.</param>
            <param name="pen">Optional pen for painting the border.</param>
            <param name="shadow">Boolean indicating if a shadow should be painted.</param>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.DrawCylinder(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Brush,System.Drawing.Pen,System.Boolean)">
            <summary>
            Draws a cylinder for the given parameters.
            </summary>
            <param name="x">X-coordinate of the shape.</param>
            <param name="y">Y-coordinate of the shape.</param>
            <param name="w">Width of the shape.</param>
            <param name="h">Height of the shape.</param>
            <param name="brush">Optional brush for painting the background.</param>
            <param name="pen">Optional pen for painting the border.</param>
            <param name="shadow">Boolean indicating if a shadow should be painted.</param>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.DrawActor(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Brush,System.Drawing.Pen,System.Boolean)">
            <summary>
            Draws an actor shape for the given parameters.
            </summary>
            <param name="x">X-coordinate of the shape.</param>
            <param name="y">Y-coordinate of the shape.</param>
            <param name="w">Width of the shape.</param>
            <param name="h">Height of the shape.</param>
            <param name="brush">Optional brush for painting the background.</param>
            <param name="pen">Optional pen for painting the border.</param>
            <param name="shadow">Boolean indicating if a shadow should be painted.</param>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.DrawCloud(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Brush,System.Drawing.Pen,System.Boolean)">
            <summary>
            Draws a cloud shape for the given parameters.
            </summary>
            <param name="x">X-coordinate of the shape.</param>
            <param name="y">Y-coordinate of the shape.</param>
            <param name="w">Width of the shape.</param>
            <param name="h">Height of the shape.</param>
            <param name="brush">Optional brush for painting the background.</param>
            <param name="pen">Optional pen for painting the border.</param>
            <param name="shadow">Boolean indicating if a shadow should be painted.</param>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.DrawTriangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Brush,System.Drawing.Pen,System.Boolean,System.String)">
            <summary>
            Draws a triangle shape for the given parameters.
            </summary>
            <param name="x">X-coordinate of the shape.</param>
            <param name="y">Y-coordinate of the shape.</param>
            <param name="w">Width of the shape.</param>
            <param name="h">Height of the shape.</param>
            <param name="brush">Optional brush for painting the background.</param>
            <param name="pen">Optional pen for painting the border.</param>
            <param name="shadow">Boolean indicating if a shadow should be painted.</param>
            <param name="direction">Specifies the direction of the triangle.</param>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.DrawHexagon(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Brush,System.Drawing.Pen,System.Boolean,System.String)">
            <summary>
            Draws a hexagon shape for the given parameters.
            </summary>
            <param name="x">X-coordinate of the shape.</param>
            <param name="y">Y-coordinate of the shape.</param>
            <param name="w">Width of the shape.</param>
            <param name="h">Height of the shape.</param>
            <param name="brush">Optional brush for painting the background.</param>
            <param name="pen">Optional pen for painting the border.</param>
            <param name="shadow">Boolean indicating if a shadow should be painted.</param>
            <param name="direction">Specifies the direction of the hexagon.</param>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.getArcSize(System.Int32,System.Int32)">
            <summary>
            Computes the arc size for the given dimension.
            </summary>
            <param name="w">Width of the rectangle.</param>
            <param name="h">Height of the rectangle.</param>
            <returns>Returns the arc size for the given dimension.</returns>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.DrawLine(System.Collections.Generic.List{com.mxgraph.mxPoint},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Draws the given lines as segments between all points of the given list
            of mxPoints.
            </summary>
            <param name="pts">List of points that define the line.</param>
            <param name="style">Style to be used for painting the line.</param>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.DrawMarker(System.Object,com.mxgraph.mxPoint,com.mxgraph.mxPoint,System.Single,System.Drawing.Pen)">
            <summary>
            Draws the given type of marker.
            </summary>
            <param name="type"></param>
            <param name="p0"></param>
            <param name="pe"></param>
            <param name="size"></param>
            <param name="pen"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.DrawText(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Draws the specified text either using drawHtmlString or using drawString.
            </summary>
            <param name="text"></param>
            <param name="x">X-coordinate of the text.</param>
            <param name="y">Y-coordinate of the text.</param>
            <param name="w">Width of the text.</param>
            <param name="h">Height of the text.</param>
            <param name="style">Style to be used for painting the text.</param>
        </member>
        <member name="M:com.mxgraph.mxGdiCanvas.Destroy">
            <summary>
            Destroys the canvas and frees all allocated resources.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGdiCanvas.Graphics">
            <summary>
            Sets or gets the graphics object to paint the canvas.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxPerimeterFunction">
            <summary>
            Defines the requirements for a perimeter function.
            </summary>
            <param name="bounds">Rectangle that represents the absolute bounds of the
            vertex.</param>
            <param name="vertex">Cell state that represents the vertex.</param>
            <param name="next">Point that represents the nearest neighbour point on the
            given edge.</param>
            <param name="orthogonal">Boolean that specifies if the orthogonal projection onto
            the perimeter should be returned. If this is false then the intersection
            of the perimeter and the line between the next and the center point is
            returned.</param>
        </member>
        <member name="T:com.mxgraph.mxPerimeter">
            <summary>
            Provides various perimeter functions to be used in a style
            as the value of mxConstants.STYLE_PERIMETER.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxPerimeter.RectanglePerimeter">
            <summary>
            Describes a rectangular perimeter for the given bounds.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxPerimeter.EllipsePerimeter">
            <summary>
            Describes an elliptic perimeter.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxPerimeter.RhombusPerimeter">
            <summary>
            Describes a rhombus (aka diamond) perimeter.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxPerimeter.TrianglePerimeter">
            <summary>
            Describes a triangle perimeter.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxStyleRegistry">
            <summary>
            Static class that acts as a global registry for codecs. See mxCodec for
            an example of using this class.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxStyleRegistry.values">
            <summary>
            Maps from strings to objects.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxStyleRegistry.PutValue(System.String,System.Object)">
            <summary>
            Puts the given object into the registry under the given name.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxStyleRegistry.GetValue(System.String)">
            <summary>
            Returns the value associated with the given name.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxStyleRegistry.GetName(System.Object)">
            <summary>
            Returns the value associated with the given name.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxDiagramChangeEventHandler">
            <summary>
            Defines the requirementns for an object that listens to changes on the
            shared diagram.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxSharedDiagram">
            <summary>
            Implements a diagram that may be shared among multiple sessions.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxSharedDiagram.state">
            <summary>
            Holds the initial state of the diagram.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxSharedDiagram.delta">
            <summary>
            Holds the delta of all changes of initial state.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxSharedDiagram.#ctor(System.String)">
            <summary>
            Constructs a new diagram with the given initial state.
            </summary>
            <param name="state">Initial state of the diagram.</param>
        </member>
        <member name="M:com.mxgraph.mxSharedDiagram.GetDelta">
            <summary>
            Returns the delta of all changes as a string.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxSharedDiagram.ProcessDelta(System.Object,System.Xml.XmlNode)">
            <summary>
            Appends the given string to the history and dispatches the change to all
            sessions that are listening to this shared diagram.
            </summary>
            <param name="sender"></param>
            <param name="delta"></param>
        </member>
        <member name="M:com.mxgraph.mxSharedDiagram.ProcessEdit(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxSharedDiagram.AddDelta(System.String)">
            <summary>
            Clears the delta of all changes.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxSharedDiagram.ResetDelta">
            <summary>
            Clears the delta of all changes.
            </summary>
        </member>
        <member name="E:com.mxgraph.mxSharedDiagram.DiagramChange">
            <summary>
            Fires when the diagram was changed.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxSharedDiagram.State">
            <summary>
            Returns the initial state of the diagram.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxModelCodec">
            <summary>
            Codec for mxGraphModels. This class is created and registered
            dynamically at load time and used implicitely via mxCodec
            and the mxCodecRegistry.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxModelCodec.#ctor">
            <summary>
            Constructs a new model codec.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxModelCodec.#ctor(System.Object)">
            <summary>
            Constructs a new model codec for the given template.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxModelCodec.#ctor(System.Object,System.String[],System.String[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructs a new model codec for the given arguments.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxModelCodec.EncodeObject(com.mxgraph.mxCodec,System.Object,System.Xml.XmlNode)">
            <summary>
            Encodes the given mxGraphModel by writing a (flat) XML sequence
            of cell nodes as produced by the mxCellCodec. The sequence is
            wrapped-up in a node with the name root.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxModelCodec.BeforeDecode(com.mxgraph.mxCodec,System.Xml.XmlNode,System.Object)">
            <summary>
            Reads the cells into the graph model. All cells are children of the root
            element in the node.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxGraphView">
            <summary>
            Implements a view for the graph. This class is in charge of computing the
            absolute coordinates for the relative child geometries, the points for
            perimeters and edge styles and keeping them cached in mxCellStates for
            faster retrieval. The states are updated whenever the model or the view
            state (translate, scale) changes. The scale and translate are honoured in
            the bounds.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraphView.EMPTY_POINT">
            <summary>
            Shared instance of an empty point.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraphView.graph">
            <summary>
            Reference to the enclosing graph.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraphView.graphBounds">
            <summary>
            Caches the current bounds of the graph.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraphView.scale">
            <summary>
            Specifies the scale. Default is 1 (100%).
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraphView.translate">
            <summary>
            Point that specifies the current translation. Default is a new
            empty point.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraphView.states">
            <summary>
            Maps from cells to cell states.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraphView.eventsEnabled">
            <summary>
            Specifies if the view should be revalidated if the scale or
            translation changes.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphView.#ctor(com.mxgraph.mxGraph)">
            <summary>
            Constructs a new view for the given graph.
            </summary>
            <param name="graph">Reference to the enclosing graph.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphView.GetBounds(System.Object[])">
            <summary>
            Returns the bounding box for an array of cells or null, if no cells are
            specified.
            </summary>
            <param name="cells"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraphView.GetBoundingBox(System.Object[])">
            <summary>
            Returns the bounding box for an array of cells or null, if no cells are
            specified.
            </summary>
            <param name="cells"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraphView.GetBounds(System.Object[],System.Boolean)">
            <summary>
            Returns the bounding box for an array of cells or null, if no cells are
            specified.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphView.Revalidate">
            <summary>
            First invalidates, then validates all cell states.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphView.Invalidate">
            <summary>
            Invalidates all cell states.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphView.Validate">
            <summary>
            First validates all bounds and then validates all points recursively on
            all visible cells.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphView.ValidateBounds(com.mxgraph.mxCellState,System.Object)">
            <summary>
            Validates the bounds of the given parent's child using the given parent
            state as the origin for the child. The validation is carried out
            recursively for all non-collapsed descendants.
            </summary>
            <param name="parentState">Cell state for the given parent.</param>
            <param name="cell">Cell for which the bounds in the state should be updated.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphView.UpdateVertexLabelOffset(com.mxgraph.mxCellState)">
            <summary>
            Updates the absoluteOffset of the given vertex cell state. This takes
            into account the label position styles.
            </summary>
            <param name="state">Cell state whose absolute offset should be updated.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphView.ValidatePoints(com.mxgraph.mxCellState,System.Object)">
            <summary>
            Validates the points for the state of the given cell recursively if the
            cell is not collapsed and returns the bounding box of all visited states
            as a rectangle.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphView.childMoved(com.mxgraph.mxCellState,com.mxgraph.mxCellState)">
            <summary>
            Invoked when a child state was moved as a result of late evaluation
            of its position. This is invoked for relative edge children whose
            position can only be determined after the points of the parent edge
            are updated in validatePoints, and validates the bounds of all
            descendants of the child using validateBounds.
            </summary>
            <param name="parent">State that represents the parent.</param>
            <param name="child">State that represents the child.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphView.UpdateLabelBounds(com.mxgraph.mxCellState)">
            <summary>
            Updates the label bounds in the given state.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:com.mxgraph.mxGraphView.UpdateBoundingBox(com.mxgraph.mxCellState)">
            <summary>
            Updates the bounding box in the given cell state.
            </summary>
            <param name="state">Cell state whose bounding box should be
            updated.</param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraphView.UpdateFixedTerminalPoints(com.mxgraph.mxCellState,com.mxgraph.mxCellState,com.mxgraph.mxCellState)">
            <summary>
            Sets the initial absolute terminal points in the given state before the edge
            style is computed.
            </summary>
            <param name="edge">Cell state whose initial terminal points should be updated.</param>
            <param name="source">Cell state which represents the source terminal.</param>
            <param name="target">Cell state which represents the target terminal.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphView.UpdateFixedTerminalPoint(com.mxgraph.mxCellState,com.mxgraph.mxCellState,System.Boolean,com.mxgraph.mxConnectionConstraint)">
            <summary>
            Sets the fixed source or target terminal point on the given edge.
            </summary>
            <param name="edge">State whose terminal point should be updated.</param>
            <param name="terminal">State which represents the actual terminal.</param>
            <param name="source">Boolean that specifies if the terminal is the source.</param>
            <param name="constraint">Constraint that specifies the connection.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphView.UpdatePoints(com.mxgraph.mxCellState,System.Collections.Generic.List{com.mxgraph.mxPoint},com.mxgraph.mxCellState,com.mxgraph.mxCellState)">
            <summary>
            Updates the absolute points in the given state using the specified array
            of points as the relative points.
            </summary>
            <param name="edge">Cell state whose absolute points should be updated.</param>
            <param name="points">Array of points that constitute the relative points.</param>
            <param name="source">Cell that represents the source terminal.</param>
            <param name="target">Cell that represents the target terminal.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphView.TransformControlPoint(com.mxgraph.mxCellState,com.mxgraph.mxPoint)">
            <summary>
            Transforms the given control point to an absolute point.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphView.GetEdgeStyle(com.mxgraph.mxCellState,System.Collections.Generic.List{com.mxgraph.mxPoint},System.Object,System.Object)">
            <summary>
            Returns the edge style function to be used to render the given edge
            state.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphView.UpdateFloatingTerminalPoints(com.mxgraph.mxCellState,com.mxgraph.mxCellState,com.mxgraph.mxCellState)">
            <summary>
            Updates the terminal points in the given state after the edge style was
            computed for the edge.
            </summary>
            <param name="state">State whose terminal points should be updated.</param>
            <param name="source">State that represents the source terminal.</param>
            <param name="target">State that represents the target terminal.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphView.UpdateFloatingTerminalPoint(com.mxgraph.mxCellState,com.mxgraph.mxCellState,com.mxgraph.mxCellState,System.Boolean)">
            <summary>
            Updates the absolute terminal point in the given state for the given
            start and end state, where start is the source if source is true.
            </summary>
            <param name="edge">State whose terminal point should be updated.</param>
            <param name="start">for the terminal on "this" side of the edge.</param>
            <param name="end">for the terminal on the other side of the edge.</param>
            <param name="source">Boolean indicating if start is the source terminal state.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphView.GetTerminalPort(com.mxgraph.mxCellState,com.mxgraph.mxCellState,System.Boolean)">
            <summary>
            Returns the given terminal or the port defined in the given edge state if a
            cell state exists for that port.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphView.GetPerimeterPoint(com.mxgraph.mxCellState,com.mxgraph.mxPoint,System.Boolean)">
            <summary>
            Returns a point that defines the location of the intersection point between
            the perimeter and the line between the center of the shape and the given point.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphView.GetPerimeterPoint(com.mxgraph.mxCellState,com.mxgraph.mxPoint,System.Boolean,System.Double)">
            <summary>
            Returns a point that defines the location of the intersection point between
            the perimeter and the line between the center of the shape and the given point.
            </summary>
            <param name="terminal">State for the source or target terminal.</param>
            <param name="next">Point that lies outside of the given terminal.</param>
            <param name="orthogonal">Specifies if the orthogonal projection onto
            the perimeter should be returned. If this is false then the intersection
            of the perimeter and the line between the next and the center point is
            returned.</param>
            <param name="border">Optional border between the perimeter and the shape.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphView.GetRoutingCenterX(com.mxgraph.mxCellState)">
            <summary>
            Returns the x-coordinate of the center point for automatic routing.
            </summary>
            <returns>Returns the x-coordinate of the routing center point.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraphView.GetRoutingCenterY(com.mxgraph.mxCellState)">
            <summary>
            Returns the y-coordinate of the center point for automatic routing.
            </summary>
            <returns>Returns the y-coordinate of the routing center point.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraphView.GetPerimeterBounds(com.mxgraph.mxCellState,System.Double)">
            <summary>
            Returns the perimeter bounds for the given terminal, edge pair.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphView.GetPerimeterFunction(com.mxgraph.mxCellState)">
            <summary>
            Returns the perimeter function for the given state.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphView.GetNextPoint(com.mxgraph.mxCellState,com.mxgraph.mxCellState,System.Boolean)">
            <summary>
            Returns the nearest point in the list of absolute points or the center
            of the opposite terminal.
            </summary>
            <param name="edge">State that represents the edge.</param>
            <param name="opposite">State that represents the opposite terminal.</param>
            <param name="source">Boolean indicating if the next point for the source or target
            should be returned.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphView.GetVisibleTerminal(System.Object,System.Boolean)">
            <summary>
            Returns the nearest ancestor terminal that is visible. The edge appears
            to be connected to this terminal on the display.
            </summary>
            <param name="edge">Cell whose visible terminal should be returned.</param>
            <param name="source">Boolean that specifies if the source or target terminal
            should be returned.</param>
            <returns>Returns the visible source or target terminal.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraphView.UpdateEdgeBounds(com.mxgraph.mxCellState)">
            <summary>
            Updates the given state using the bounding box of the absolute points.
            Also updates terminal distance, length and segments.
            </summary>
            <param name="state">Cell state whose bounds should be updated.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphView.GetPoint(com.mxgraph.mxCellState)">
            <summary>
            Returns the absolute center point along the given edge.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphView.GetPoint(com.mxgraph.mxCellState,com.mxgraph.mxGeometry)">
            <summary>
            Returns the absolute point on the edge for the given relative
            geometry as a point. The edge is represented by the given cell state.
            </summary>
            <param name="state">Represents the state of the parent edge.</param>
            <param name="geometry">Represents the relative location.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphView.GetState(System.Object)">
            <summary>
            Returns the state for the given cell or null if no state is defined for
            the cell.
            </summary>
            <param name="cell">Cell whose state should be returned.</param>
            <returns>Returns the state for the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraphView.GetStates(System.Object[])">
            <summary>
            Returns the object that maps from cells to states.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphView.GetCellStates(System.Object[])">
            <summary>
            Returns the states for the given array of cells. The array contains
            all states that are not null, that is, the returned array may have
            less elements than the given array.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphView.GetState(System.Object,System.Boolean)">
            <summary>
            Returns the cell state for the given cell. If create is true, then
            the state is created if it does not yet exist.
            </summary>
            <param name="cell">Cell for which a new state should be returned.</param>
            <param name="create">Boolean indicating if a new state should be created if it
            does not yet exist.</param>
            <returns>Returns the state for the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraphView.RemoveState(System.Object)">
            <summary>
            Removes and returns the mxCellState for the given cell.
            </summary>
            <param name="cell">mxCell for which the mxCellState should be removed.</param>
            <returns>Returns the mxCellState that has been removed.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraphView.CreateState(System.Object)">
            <summary>
            Creates and returns a cell state for the given cell.
            </summary>
            <param name="cell">Cell for which a new state should be created.</param>
            <returns>Returns a new state for the given cell.</returns>
        </member>
        <member name="P:com.mxgraph.mxGraphView.Graph">
            <summary>
            Returns the enclosing graph.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGraphView.GraphBounds">
            <summary>
            Returns the cached diagram bounds.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGraphView.Scale">
            <summary>
            Sets or returns the current scale.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGraphView.Translate">
            <summary>
            Sets or returns the current translation.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGraphView.States">
            <summary>
            Sets or returns the current translation.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGraphView.IsEventsEnabled">
            <summary>
            Sets or returns the current scale.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxICell">
            <summary>
            Defines the requirements for a cell that can be used in an mxGraphModel.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICell.GetTerminal(System.Boolean)">
            <summary>
            Returns the source or target terminal of the cell.
            </summary>
            <param name="source">Boolean that specifies if the source terminal should be
            returned.</param>
            <returns>Returns the source or target terminal.</returns>
        </member>
        <member name="M:com.mxgraph.mxICell.SetTerminal(com.mxgraph.mxICell,System.Boolean)">
            <summary>
            Sets the source or target terminal.
            </summary>
            <param name="terminal">Cell that represents the new source or target terminal.</param>
            <param name="source">Boolean that specifies if the source or target terminal
            should be set.</param>
            <returns>Returns the new terminal.</returns>
        </member>
        <member name="M:com.mxgraph.mxICell.ChildCount">
            <summary>
            Returns the number of child cells.
            </summary>
            <returns>Returns the number of child cells.</returns>
        </member>
        <member name="M:com.mxgraph.mxICell.GetIndex(com.mxgraph.mxICell)">
            <summary>
            Returns the index of the specified child in the child array.
            </summary>
            <param name="child">Child whose index should be returned.</param>
            <returns>Returns the index of the specified child.</returns>
        </member>
        <member name="M:com.mxgraph.mxICell.GetChildAt(System.Int32)">
            <summary>
            Returns the child at the specified index.
            </summary>
            <param name="index">Integer that specifies the child to be returned.</param>
            <returns>Returns the child at the specified index.</returns>
        </member>
        <member name="M:com.mxgraph.mxICell.Insert(com.mxgraph.mxICell)">
            <summary>
            Appends the specified child into the child array and updates the parent
            reference of the child.
            </summary>
            <param name="child">Cell to be appended to the child array.</param>
            <returns>Returns the appended child.</returns>
        </member>
        <member name="M:com.mxgraph.mxICell.Insert(com.mxgraph.mxICell,System.Int32)">
            <summary>
            Inserts the specified child into the child array at the specified index
            and updates the parent reference of the child.
            </summary>
            <param name="child">Cell to be inserted into the child array.</param>
            <param name="index">Integer that specifies the index at which the child should
            be inserted into the child array.</param>
            <returns>Returns the inserted child.</returns>
        </member>
        <member name="M:com.mxgraph.mxICell.Remove(System.Int32)">
            <summary>
            Removes the child at the specified index from the child array and
            returns the child that was removed. Will remove the parent reference of
            the child.
            </summary>
            <param name="index">Integer that specifies the index of the child to be
            removed.</param>
            <returns>Returns the child that was removed.</returns>
        </member>
        <member name="M:com.mxgraph.mxICell.Remove(com.mxgraph.mxICell)">
            <summary>
            Removes the given child from the child array. Will remove the parent
            reference of the child.
            </summary>
            <param name="child"></param>
            <returns>Returns the child that was removed.</returns>
        </member>
        <member name="M:com.mxgraph.mxICell.RemoveFromParent">
            <summary>
            Removes the cell from its parent.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxICell.EdgeCount">
            <summary>
            Returns the number of edges in the edge array.
            </summary>
            <returns>Returns the number of edges.</returns>
        </member>
        <member name="M:com.mxgraph.mxICell.GetEdgeIndex(com.mxgraph.mxICell)">
            <summary>
            Returns the index of the specified edge in the edge array.
            </summary>
            <param name="edge">Cell whose index should be returned.</param>
            <returns>Returns the index of the given edge.</returns>
        </member>
        <member name="M:com.mxgraph.mxICell.GetEdgeAt(System.Int32)">
            <summary>
            Returns the edge at the specified index in the edge array.
            </summary>
            <param name="index">Integer that specifies the index of the edge to be
            returned.</param>
            <returns>Returns the edge at the specified index.</returns>
        </member>
        <member name="M:com.mxgraph.mxICell.InsertEdge(com.mxgraph.mxICell,System.Boolean)">
            <summary>
            Inserts the specified edge into the edge array and returns the edge.
            Will update the respective terminal reference of the edge.
            </summary>
            <param name="edge">Cell to be inserted into the edge array.</param>
            <param name="isOutgoing">Boolean that specifies if the edge is outgoing.</param>
            <returns>Returns the inserted edge.</returns>
        </member>
        <member name="M:com.mxgraph.mxICell.RemoveEdge(com.mxgraph.mxICell,System.Boolean)">
            <summary>
            Removes the specified edge from the edge array and returns the edge.
            Will remove the respective terminal reference from the edge.
            </summary>
            <param name="edge">Cell to be removed from the edge array.</param>
            <param name="isOutgoing">Boolean that specifies if the edge is outgoing.</param>
            <returns>Returns the edge that was removed.</returns>
        </member>
        <member name="M:com.mxgraph.mxICell.RemoveFromTerminal(System.Boolean)">
            <summary>
            Removes the edge from its source or target terminal.
            </summary>
            <param name="isSource">Boolean that specifies if the edge should be removed
            from its source or target terminal.</param>
        </member>
        <member name="M:com.mxgraph.mxICell.Clone">
            <summary>
            Returns a clone of this cell.
            </summary>
            <returns>Returns a clone of this cell.</returns>
        </member>
        <member name="P:com.mxgraph.mxICell.Id">
            <summary>
            Sets or returns the Id of the cell.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICell.Value">
            <summary>
            Sets or returns the user object of the cell.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICell.Geometry">
            <summary>
            Sets or returns the geometry of the cell.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICell.Style">
            <summary>
            Sets or returns the string that describes the style.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICell.Vertex">
            <summary>
            Returns true if the cell is a vertex.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICell.Edge">
            <summary>
            Returns true if the cell is an edge.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICell.Connectable">
            <summary>
            Returns true if the cell is connectable.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICell.Visible">
            <summary>
            Sets or returns the visible state of the cell.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICell.Collapsed">
            <summary>
            Sets or returns the collapsed state of the cell.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxICell.Parent">
            <summary>
            Sets or returns the parent of the cell.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxCellPath">
            <summary>
            Implements a mechanism for temporary cell Ids.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCellPath.PATH_SEPARATOR">
            <summary>
            Defines the separator between the path components. Default is ".".
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCellPath.Create(com.mxgraph.mxICell)">
            <summary>
            Creates the cell path for the given cell. The cell path is a
            concatenation of the indices of all cells on the (finite) path to
            the root, eg. "0.0.0.1".
            </summary>
            <param name="cell">Cell whose path should be returned.</param>
            <returns>Returns the string that represents the path.</returns>
        </member>
        <member name="M:com.mxgraph.mxCellPath.GetParentPath(System.String)">
            <summary>
            Returns the path for the parent of the cell represented by the given
            path. Returns null if the given path has no parent.
            </summary>
            <param name="path">Path whose parent path should be returned.</param>
        </member>
        <member name="M:com.mxgraph.mxCellPath.Resolve(com.mxgraph.mxICell,System.String)">
            <summary>
            Returns the cell for the specified cell path using the given root as the
            root of the path.
            </summary>
            <param name="root">Root cell of the path to be resolved.</param>
            <param name="path">String that defines the path.</param>
            <returns>Returns the cell that is defined by the path.</returns>
        </member>
        <member name="T:com.mxgraph.mxStylesheet">
            <summary>
            Defines the appearance of the cells in a graph.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxStylesheet.EMPTY_STYLE">
            <summary>
            Shared immutable empty dictionary (for undefined cell styles).
            </summary>
        </member>
        <member name="F:com.mxgraph.mxStylesheet.styles">
            <summary>
            Maps from names to styles.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxStylesheet.#ctor">
            <summary>
            Constructs a new stylesheet and assigns default styles.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxStylesheet.CreateDefaultVertexStyle">
            <summary>
            Creates and returns the default vertex style.
            </summary>
            <returns>Returns the default vertex style.</returns>
        </member>
        <member name="M:com.mxgraph.mxStylesheet.CreateDefaultEdgeStyle">
            <summary>
            Creates and returns the default edge style.
            </summary>
            <returns>Returns the default edge style.</returns>
        </member>
        <member name="M:com.mxgraph.mxStylesheet.PutCellStyle(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Stores the specified style under the given name.
            </summary>
            <param name="name">Name for the style to be stored.</param>
            <param name="style">Key, value pairs that define the style.</param>
        </member>
        <member name="M:com.mxgraph.mxStylesheet.GetCellStyle(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns the cell style for the specified cell or the given defaultStyle
            if no style can be found for the given stylename.
            </summary>
            <param name="name">String of the form [(stylename|key=value);] that represents the
            style.</param>
            <param name="defaultStyle">Default style to be returned if no style can be found.</param>
            <returns>Returns the style for the given formatted cell style.</returns>
        </member>
        <member name="P:com.mxgraph.mxStylesheet.Styles">
            <summary>
            Sets or returns the map that contains the styles.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxStylesheet.DefaultVertexStyle">
            <summary>
            Sets or returns the default style for vertices.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxStylesheet.DefaultEdgeStyle">
            <summary>
            Sets or returns the default style for edges.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxGraph">
            <summary>
            Implements a graph object that allows to create diagrams from a graph model
            and stylesheet.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraph.VERSION">
            <summary>
            Holds the version number of this release. Current version
            is 1.10.3.1.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraph.model">
            <summary>
            Holds the model that contains the cells to be displayed.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraph.stylesheet">
            <summary>
            Holds the stylesheet that defines the appearance of the cells.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraph.view">
            <summary>
            Holds the view that caches the cell states.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraph.defaultLoopStyle">
            <summary>
            Specifies the default style for loops.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraph.tolerance">
            <summary>
            Specifies the tolerance for mouse clicks. Default is 4.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraph.labelsVisible">
            <summary>
            Specifies if labels should be visible. This is used in
            GetLabel. Default is true.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraph.gridSize">
            <summary>
            Specifies the grid size. Default is 10.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraph.gridEnabled">
            <summary>
            Specifies if the grid is enabled. Default is true.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraph.imageBundles">
            <summary>
            Holds the list of image bundles.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.#ctor">
            <summary>
            Constructs a new graph with an empty graph model.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.#ctor(com.mxgraph.mxIGraphModel)">
            <summary>
            Constructs a new graph for the specified model. If no model is
            specified, then a new, empty graph model is used.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.#ctor(com.mxgraph.mxStylesheet)">
            <summary>
            Constructs a new graph for the specified model. If no model is
            specified, then a new, empty graph model is used.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.#ctor(com.mxgraph.mxIGraphModel,com.mxgraph.mxStylesheet)">
            <summary>
            Constructs a new graph for the specified model. If no model is
            specified, then a new, empty graph model is used.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.CreateStylesheet">
            <summary>
            Constructs a new stylesheet to be used in this graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.CreateGraphView">
            <summary>
            Constructs a new view to be used in this graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.Snap(System.Double)">
            <summary>
            Snaps the given numeric value to the grid if gridEnabled is true.
            </summary>
            <param name="value">Numeric value to be snapped to the grid.</param>
            <returns>Returns the value aligned to the grid.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetDefaultParent">
            <summary>
            Returns the first child of the root in the model, that is, the first or
            default layer of the diagram.
            </summary>
            <returns>Returns the default parent for new cells.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.ConvertValueToString(System.Object)">
            <summary>
            Returns the textual representation for the given cell.
            </summary>
            <param name="cell">Cell to be converted to a string.</param>
            <returns>Returns the textual representation of the cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetLabel(System.Object)">
            <summary>
            Returns a string or markup that represents the label for the given
            cell. This implementation uses ConvertValueToString if labelsVisible
            is true. Otherwise it returns an empty string.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetChildOffsetForCell(System.Object)">
            <summary>
            Returns the offset to be used for the cells inside the given cell. The
            root and layer cells may be identified using mxGraphModel.isRoot and
            mxGraphModel.isLayer. This implementation returns null.
            </summary>
            <param name="cell">Cell whose offset should be returned.</param>
            <returns>Returns the child offset for the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.IsOrthogonal(com.mxgraph.mxCellState)">
            <summary>
            Returns true if perimeter points should be computed such that the
            resulting edge has only horizontal or vertical segments. 
            </summary>
            <param name="edge">Cell state that represents the edge.</param>
            <returns>True if the edge is orthogonal.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.IsSwimlane(System.Object)">
            <summary>
            Returns true if the given cell is a swimlane.
            </summary>
            <param name="cell">Cell that should be checked.</param>
            <returns>Returns true if the cell is a swimlane.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.IsCellMovable(System.Object)">
            <summary>
            Returns true if the given cell is movable. This implementation always
            returns true.
            </summary>
            <param name="cell">Cell whose movable state should be returned.</param>
            <returns>Returns true if the cell is movable.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.IsCellVisible(System.Object)">
            <summary>
            Returns true if the given cell is visible. This implementation returns
            true if the visible state of the cell in the model is true.
            </summary>
            <param name="cell">Cell whose visible state should be returned.</param>
            <returns>Returns the visible state of the cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.IsCellCollapsed(System.Object)">
            <summary>
            Returns true if the given cell is collapsed. This implementation returns
            true if the collapsed state of the cell in the model is true.
            </summary>
            <param name="cell">Cell whose collapsed state should be returned.</param>
            <returns>Returns the collapsed state of the cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.IsCellConnectable(System.Object)">
            <summary>
            Returns true if the given cell is connectable. This implementation returns
            true if the connectable state of the cell in the model is true.
            </summary>
            <param name="cell">Cell whose connectable state should be returned.</param>
            <returns>Returns the connectable state of the cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetCellGeometry(System.Object)">
            <summary>
            Returns the geometry for the given cell.
            </summary>
            <param name="cell">Cell whose geometry should be returned.</param>
            <returns>Returns the geometry of the cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetCellStyle(System.Object)">
            <summary>
            Returns the style for the given cell.
            </summary>
            <param name="cell">Cell whose style should be returned.</param>
            <returns>Returns the style of the cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.PostProcessCellStyle(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Tries to resolve the value for the image style in the image bundles
            and turns short data URIs as defined in mxImageBundle to data URIs
            as defined in RFC 2397 of the IETF.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.AddImageBundle(com.mxgraph.mxImageBundle)">
            <summary>
            Adds the specified bundle.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.RemoveImageBundle(com.mxgraph.mxImageBundle)">
            <summary>
            Removes the specified bundle.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetImageFromBundles(System.String)">
            <summary>
            Searches all bundles for the specified key and returns the value for the
            first match or null if the key is not found.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.SetCellStyles(System.String,System.String,System.Object[])">
            <summary>
            Sets the key to value in the styles of the given cells. This will modify
            the existing cell styles in-place and override any existing assignment
            for the given key. If no cells are specified, then the selection cells
            are changed. If no value is specified, then the respective key is
            removed from the styles.
            </summary>
            <param name="key">String representing the key to be assigned.</param>
            <param name="value">String representing the new value for the key.</param>
            <param name="cells">Array of cells to change the style for.</param>
        </member>
        <member name="M:com.mxgraph.mxGraph.InsertVertex(System.Object,System.String,System.Object,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates and adds a new vertex with an empty style, see AddVertex.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.InsertVertex(System.Object,System.String,System.Object,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Creates and adds a new vertex with an empty style, see AddVertex.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.InsertVertex(System.Object,System.String,System.Object,System.Double,System.Double,System.Double,System.Double,System.String,System.Boolean)">
            <summary>
            Adds a new vertex into the given parent using value as the user object
            and the given coordinates as the geometry of the new vertex. The id and
            style are used for the respective properties of the new cell, which is
            returned.
            </summary>
            <param name="parent">Cell that specifies the parent of the new vertex.</param>
            <param name="id">Optional string that defines the Id of the new vertex.</param>
            <param name="value">Object to be used as the user object.</param>
            <param name="x">Integer that defines the x coordinate of the vertex.</param>
            <param name="y">Integer that defines the y coordinate of the vertex.</param>
            <param name="width">Integer that defines the width of the vertex.</param>
            <param name="height">Integer that defines the height of the vertex.</param>
            <param name="style">Optional string that defines the cell style.</param>
            <returns>Returns the new vertex that has been inserted.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.CreateVertex(System.Object,System.String,System.Object,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Creates a new vertex to be used in insertVertex.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.CreateVertex(System.Object,System.String,System.Object,System.Double,System.Double,System.Double,System.Double,System.String,System.Boolean)">
            <summary>
            Creates a new vertex to be used in insertVertex.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.InsertEdge(System.Object,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Creates and adds a new edge with an empty style.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.InsertEdge(System.Object,System.String,System.Object,System.Object,System.Object,System.String)">
            <summary>
            Adds a new edge into the given parent using value as the user object and
            the given source and target as the terminals of the new edge. The Id and
            style are used for the respective properties of the new cell, which is
            returned.
            </summary>
            <param name="parent">Cell that specifies the parent of the new edge.</param>
            <param name="id">Optional string that defines the Id of the new edge.</param>
            <param name="value">Object to be used as the user object.</param>
            <param name="source">Cell that defines the source of the edge.</param>
            <param name="target">Cell that defines the target of the edge.</param>
            <param name="style">Optional string that defines the cell style.</param>
            <returns>Returns the new edge that has been inserted.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.CreateEdge(System.Object,System.String,System.Object,System.Object,System.Object,System.String)">
            <summary>
            Creates the edge to be used in insertEdge. This implementation does
            not set the source and target of the edge, these are set when the
            edge is added to the model.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetGraphBounds">
            <summary>
            Returns the bounds of the visible graph.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetCellBounds(System.Object)">
            <summary>
            Returns the bounds of the given cell.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetCellBounds(System.Object,System.Boolean)">
            <summary>
            Returns the bounds of the given cell including all connected edges
            if includeEdge is true.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetCellBounds(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Returns the bounds of the given cell including all connected edges
            if includeEdge is true.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetBoundingBox(System.Object)">
            <summary>
            Returns the bounds of the given cell.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetBoundingBox(System.Object,System.Boolean)">
            <summary>
            Returns the bounding box of the given cell including all connected edges
            if includeEdge is true.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetBoundingBox(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Returns the bounding box of the given cell including all connected edges
            if includeEdge is true.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetPaintBounds(System.Object[])">
            <summary>
            Returns the bounding box of the given cells and their descendants.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetBoundsForCells(System.Object[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the bounds for the given cells.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetCellBounds(System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the bounds of the given cell including all connected edges
            if includeEdge is true.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetConnectionConstraint(com.mxgraph.mxCellState,com.mxgraph.mxCellState,System.Boolean)">
            <summary>
            Returns a connection constraint that describes the given connection
            point. This result can then be passed to getConnectionPoint.
            </summary>
            <param name="edge">Cell state that represents the edge.</param>
            <param name="terminal">Cell state that represents the terminal.</param>
            <param name="source">Boolean indicating if the terminal is the source or target.</param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetConnectionPoint(com.mxgraph.mxCellState,com.mxgraph.mxConnectionConstraint)">
            <summary>
            Returns the nearest point in the list of absolute points or the center
            of the opposite terminal.
            </summary>
            <param name="vertex">Cell state that represents the vertex.</param>
            <param name="constraint">Connection constraint that represents the connection
            point constraint as returned by getConnectionConstraint.</param>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetCellAt(System.Int32,System.Int32)">
            <summary>
            Returns the cell at the given location.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetCellAt(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the cell at the given location.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetCellAt(System.Int32,System.Int32,System.Boolean,System.Object)">
            <summary>
            Returns the bottom-most cell that intersects the given point (x, y) in
            the cell hierarchy starting at the given parent.
            </summary>
            <param name="x">X-coordinate of the location to be checked.</param>
            <param name="y">Y-coordinate of the location to be checked.</param>
            <param name="hitSwimlaneContent"></param>
            <param name="parent">that should be used as the root of the recursion.</param>
            <returns>Returns the child at the given location.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.Intersects(com.mxgraph.mxCellState,System.Drawing.Rectangle)">
            <summary>
            Returns the bottom-most cell that intersects the given point (x, y) in
            the cell hierarchy that starts at the given parent.
            </summary>
            <param name="state"></param>
            <param name="rect"></param>
            <returns>Returns true if the given cell state and rectangle intersect.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.HitsSwimlaneContent(System.Object,System.Int32,System.Int32)">
            <summary>
            Returns true if the given point is inside the content area of the given
            swimlane. (The content area of swimlanes is transparent to events.) This
            implementation does not check if the given state is a swimlane, it is
            assumed that the caller has checked this before using this method.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetChildVertices(System.Object)">
            <summary>
            Returns the visible child vertices of the given parent.
            </summary>
            <param name="parent">Cell whose children should be returned.</param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetChildEdges(System.Object)">
            <summary>
            Returns the visible child edges of the given parent.
            </summary>
            <param name="parent">Cell whose children should be returned.</param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetChildCells(System.Object)">
            <summary>
            Returns the visible children of the given parent.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetChildCells(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Returns the visible child vertices or edges in the given parent. If
            vertices and edges is false, then all children are returned.
            </summary>
            <param name="parent">Cell whose children should be returned.</param>
            <param name="vertices">Specifies if child vertices should be returned.</param>
            <param name="edges">Specifies if child edges should be returned.</param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetConnections(System.Object)">
            <summary>
            Returns all visible edges connected to the given cell without loops.
            </summary>
            <param name="cell">Cell whose connections should be returned.</param>
            <returns>Returns the connected edges for the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetConnections(System.Object,System.Object)">
            <summary>
            Returns all visible edges connected to the given cell without loops.
            </summary>
            <param name="cell">Cell whose connections should be returned.</param>
            <param name="parent">Optional parent of the opposite end for a connection
            to be returned.</param>
            <returns>Returns the connected edges for the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetIncomingEdges(System.Object)">
            <summary>
            Returns all incoming visible edges connected to the given cell without
            loops.
            </summary>
            <param name="cell">Cell whose incoming edges should be returned.</param>
            <returns>Returns the incoming edges of the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetIncomingEdges(System.Object,System.Object)">
            <summary>
            Returns the visible incoming edges for the given cell. If the optional
            parent argument is specified, then only child edges of the given parent
            are returned.
            </summary>
            <param name="cell">Cell whose incoming edges should be returned.</param>
            <param name="parent">Optional parent of the opposite end for a connection
            to be returned.</param>
            <returns>Returns the incoming edges of the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetOutgoingEdges(System.Object)">
            <summary>
            Returns all outgoing visible edges connected to the given cell without
            loops.
            </summary>
            <param name="cell">Cell whose outgoing edges should be returned.</param>
            <returns>Returns the outgoing edges of the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetOutgoingEdges(System.Object,System.Object)">
            <summary>
            Returns the visible outgoing edges for the given cell. If the optional
            parent argument is specified, then only child edges of the given parent
            are returned.
            </summary>
            <param name="cell">Cell whose outgoing edges should be returned.</param>
            <param name="parent">Optional parent of the opposite end for a connection
            to be returned.</param>
            <returns>Returns the outgoing edges of the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetEdges(System.Object)">
            <summary>
            Returns all visible edges connected to the given cell including loops.
            </summary>
            <param name="cell">Cell whose edges should be returned.</param>
            <returns>Returns the edges of the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetEdges(System.Object,System.Object)">
            <summary>
            Returns all visible edges connected to the given cell including loops.
            </summary>
            <param name="cell">Cell whose edges should be returned.</param>
            <param name="parent">Optional parent of the opposite end for an edge
            to be returned.</param>
            <returns>Returns the edges of the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetEdges(System.Object,System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the incoming and/or outgoing edges for the given cell.
            If the optional parent argument is specified, then only edges are returned
            where the opposite is in the given parent cell. If at least one of incoming
            or outgoing is true, then loops are ignored, if both are false, then all
            edges connected to the given cell are returned including loops.
            </summary>
            <param name="cell">Cell whose edges should be returned.</param>
            <param name="parent">Optional parent of the opposite end for an edge to be
            returned.</param>
            <param name="incoming">Specifies if incoming edges should be included in the
            result.</param>
            <param name="outgoing">Specifies if outgoing edges should be included in the
            result.</param>
            <param name="includeLoops">Specifies if loops should be included in the
            result.</param>
            <returns>Returns the edges connected to the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetEdges(System.Object,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the incoming and/or outgoing edges for the given cell.
            If the optional parent argument is specified, then only edges are returned
            where the opposite is in the given parent cell. If at least one of incoming
            or outgoing is true, then loops are ignored, if both are false, then all
            edges connected to the given cell are returned including loops.
            </summary>
            <param name="cell">Cell whose edges should be returned.</param>
            <param name="parent">Optional parent of the opposite end for an edge to be
            returned.</param>
            <param name="incoming">Specifies if incoming edges should be included in the
            result.</param>
            <param name="outgoing">Specifies if outgoing edges should be included in the
            result.</param>
            <param name="includeLoops">Specifies if loops should be included in the
            result.</param>
            <param name="recurse">Boolean the specifies if the parent specified only 
            need be an ancestral parent, true, or the direct parent, false.</param>
            <returns>Returns the edges connected to the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.IsValidAncestor(System.Object,System.Object,System.Boolean)">
            <summary>
            Returns whether or not the specified parent is a valid
            ancestor of the specified cell, either direct or indirectly
            based on whether ancestor recursion is enabled.
            </summary>
            <param name="cell">The possible child cell</param>
            <param name="parent">The possible parent cell</param>
            <param name="recurse">boolean whether or not to recurse the child ancestors</param>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetOpposites(System.Object[],System.Object)">
            <summary>
            Returns all distinct visible opposite cells of the terminal on the
            given edges.
            </summary>
            <param name="edges"></param>
            <param name="terminal"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetOpposites(System.Object[],System.Object,System.Boolean,System.Boolean)">
            <summary>
            Returns all distincts visible opposite cells for the specified
            terminal on the given edges.
            </summary>
            <param name="edges">Edges whose opposite terminals should be returned.</param>
            <param name="terminal">Terminal that specifies the end whose opposite should be
            returned.</param>
            <param name="sources">Specifies if source terminals should be included in the
            result.</param>
            <param name="targets">Specifies if targer terminals should be included in the
            result.</param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetEdgesBetween(System.Object,System.Object)">
            <summary>
            Returns the edges between the given source and target. This takes into
            account collapsed and invisible cells and returns the connected edges
            as displayed on the screen.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.GetEdgesBetween(System.Object,System.Object,System.Boolean)">
            <summary>
            Returns the edges between the given source and target. This takes into
            account collapsed and invisible cells and returns the connected edges
            as displayed on the screen.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="directed"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.FindTreeRoots(System.Object)">
            <summary>
            Returns all children in the given parent which do not have incoming
            edges. If the result is empty then the with the greatest difference
            between incoming and outgoing edges is returned.
            </summary>
            <param name="parent">Cell whose children should be checked.</param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.FindTreeRoots(System.Object,System.Boolean)">
            <summary>
            Returns all children in the given parent which do not have incoming
            edges. If the result is empty then the with the greatest difference
            between incoming and outgoing edges is returned.
            </summary>
            <param name="parent">Cell whose children should be checked.</param>
            <param name="isolate">Specifies if edges should be ignored if the opposite
            end is not a child of the given parent cell.</param>
            <returns>Array of tree roots in parent.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.FindTreeRoots(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Returns all children in the given parent which do not have incoming
            edges. If the result is empty then the with the greatest difference
            between incoming and outgoing edges is returned.
            </summary>
            <param name="parent">Cell whose children should be checked.</param>
            <param name="isolate">Specifies if edges should be ignored if the opposite
            end is not a child of the given parent cell.</param>
            <param name="invert">Specifies if outgoing or incoming edges should be counted
            for a tree root. If false then outgoing edges will be counted.</param>
            <returns>Array of tree roots in parent.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraph.DrawGraph(com.mxgraph.mxICanvas)">
            <summary>
            Draws the graph onto the given canvas.
            </summary>
            <param name="canvas">Canvas onto which the graph should be drawn.</param>
        </member>
        <member name="M:com.mxgraph.mxGraph.DrawCell(com.mxgraph.mxICanvas,System.Object)">
            <summary>
            Draws the given cell onto the specified canvas.
            </summary>
            <param name="canvas">Canvas onto which the cell should be drawn.</param>
            <param name="cell">Cell that should be drawn onto the canvas.</param>
        </member>
        <member name="M:com.mxgraph.mxGraph.DrawState(com.mxgraph.mxICanvas,com.mxgraph.mxCellState,System.String)">
            <summary>
            Draws the given cell and label onto the specified canvas. No
            children or descendants are painted.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraph.GraphModelChanged">
            <summary>
            Called when the graph model has changed to invalidate the view.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGraph.Model">
            <summary>
            Sets or returns the graph model that contains the graph data.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGraph.Stylesheet">
            <summary>
            Sets or returns the stylesheet that provides the style.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGraph.View">
            <summary>
            Sets or returns the view that contains the cell states.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGraph.DefaultLoopStyle">
            <summary>
            Sets or returns the default edge style for loops.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGraph.GridEnabled">
            <summary>
            Sets or returns the enabled state of the grid.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGraph.GridSize">
            <summary>
            Sets or returns the grid size.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGraph.LabelsVisible">
            <summary>
            Sets or returns if labels are visible
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGraph.ImageBundles">
            <summary>
            Sets or returns the image bundles.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxConstants">
            <summary>
            Defines various global constants.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.FONT_BOLD">
            <summary>
            FONT_BOLD
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.FONT_ITALIC">
            <summary>
            FONT_ITALIC
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.FONT_UNDERLINE">
            <summary>
            FONT_UNDERLINE
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.FONT_SHADOW">
            <summary>
            FONT_SHADOW
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.SHAPE_RECTANGLE">
            <summary>
            SHAPE_RECTANGLE
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.SHAPE_ELLIPSE">
            <summary>
            SHAPE_ELLIPSE
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.SHAPE_DOUBLE_ELLIPSE">
            <summary>
            SHAPE_DOUBLE_ELLIPSE
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.SHAPE_RHOMBUS">
            <summary>
            SHAPE_RHOMBUS
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.SHAPE_LINE">
            <summary>
            SHAPE_LINE
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.SHAPE_IMAGE">
            <summary>
            SHAPE_IMAGE
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.SHAPE_ARROW">
            <summary>
            SHAPE_ARROW
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.SHAPE_LABEL">
            <summary>
            SHAPE_LABEL
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.SHAPE_CYLINDER">
            <summary>
            SHAPE_CYLINDER
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.SHAPE_SWIMLANE">
            <summary>
            SHAPE_SWIMLANE
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.SHAPE_CONNECTOR">
            <summary>
            SHAPE_CONNECTOR
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.SHAPE_ACTOR">
            <summary>
            SHAPE_ACTOR
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.SHAPE_CLOUD">
            <summary>
            SHAPE_CLOUD
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.SHAPE_TRIANGLE">
            <summary>
            SHAPE_TRIANGLE
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.SHAPE_HEXAGON">
            <summary>
            SHAPE_HEXAGON
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.ARROW_CLASSIC">
            <summary>
            ARROW_CLASSIC
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.ARROW_BLOCK">
            <summary>
            ARROW_BLOCK
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.ARROW_OPEN">
            <summary>
            ARROW_OPEN
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.ARROW_OVAL">
            <summary>
            ARROW_BLOCK
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.ARROW_DIAMOND">
            <summary>
            ARROW_OPEN
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.ALIGN_LEFT">
            <summary>
            ALIGN_LEFT
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.ALIGN_CENTER">
            <summary>
            ALIGN_CENTER
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.ALIGN_RIGHT">
            <summary>
            ALIGN_RIGHT
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.ALIGN_TOP">
            <summary>
            ALIGN_TOP
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.ALIGN_MIDDLE">
            <summary>
            ALIGN_MIDDLE
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.ALIGN_BOTTOM">
            <summary>
            ALIGN_BOTTOM
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.DIRECTION_NORTH">
            <summary>
            DIRECTION_NORTH
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.DIRECTION_SOUTH">
            <summary>
            DIRECTION_SOUTH
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.DIRECTION_EAST">
            <summary>
            DIRECTION_EAST
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.DIRECTION_WEST">
            <summary>
            DIRECTION_WEST
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.ELBOW_VERTICAL">
            <summary>
            ELBOW_VERTICAL
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.ELBOW_HORIZONTAL">
            <summary>
            ELBOW_HORIZONTAL
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.EDGESTYLE_ELBOW">
            <summary>
            Name of the elbow edge style. Can be used as a string value
            for the STYLE_EDGE style.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.EDGESTYLE_ENTITY_RELATION">
            <summary>
            Name of the entity relation edge style. Can be used as a string value
            for the STYLE_EDGE style.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.EDGESTYLE_LOOP">
            <summary>
            Name of the loop edge style. Can be used as a string value
            for the STYLE_EDGE style.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.EDGESTYLE_SIDETOSIDE">
            <summary>
            Name of the side to side edge style. Can be used as a string value
            for the STYLE_EDGE style.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.EDGESTYLE_TOPTOBOTTOM">
            <summary>
            Name of the top to bottom edge style. Can be used as a string value
            for the STYLE_EDGE style.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.PERIMETER_ELLIPSE">
            <summary>
            Name of the ellipse perimeter. Can be used as a string value
            for the STYLE_PERIMETER style.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.PERIMETER_RECTANGLE">
            <summary>
            Name of the rectangle perimeter. Can be used as a string value
            for the STYLE_PERIMETER style.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.PERIMETER_RHOMBUS">
            <summary>
            Name of the rhombus perimeter. Can be used as a string value
            for the STYLE_PERIMETER style.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.PERIMETER_TRIANGLE">
            <summary>
            Name of the triangle perimeter. Can be used as a string value
            for the STYLE_PERIMETER style.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.DEFAULT_HOTSPOT">
            <summary>
            Defines the portion of the cell which is
            to be used as a connectable region.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.MIN_HOTSPOT_SIZE">
            <summary>
            Defines the minimum size in pixels of the 
            portion of the cell cell which is to be 
            used as a connectable region.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.NS_SVG">
            <summary>
            Defines the SVG namespace.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.NS_XHTML">
            <summary>
            Defines the XHTML namespace.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.NS_XLINK">
            <summary>
            Defines the XLink namespace.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.DEFAULT_FONTFAMILY">
            <summary>
            Default family for fonts. Default is Arial.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.DEFAULT_FONTSIZE">
            <summary>
            Default size for fonts. Value is 11.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.DEFAULT_STARTSIZE">
            <summary>
            Defines the default start size for swimlanes. Default is 40.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.LINESPACING">
            <summary>
            Specifies the line spacing. Default is 2.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.FONT_SIZEFACTOR">
            <summary>
            Defines the factor to multiply font sizes in
            points to be used as font sizes in em. Default
            is 1/1.33 = 0.75.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.LABEL_INSET">
            <summary>
            Defines the inset in absolute pixels between the label
            bounding box and the label text. Default is 3.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.DEFAULT_MARKERSIZE">
            <summary>
            Default size for markers. Value is 6.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.DEFAULT_IMAGESIZE">
            <summary>
            Defines the default width and height for images used in the
            label shape. Default is 24.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STENCIL_SHADOW_OPACITY">
            <summary>
            Defines the default opacity for stencils shadows. Default is 1.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STENCIL_SHADOWCOLOR">
            <summary>
            Defines the default shadow color for stencils. Default is "gray".
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.SHADOWCOLOR">
            <summary>
            Defines the color to be used to draw shadows. Default is gray.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.SHADOW_OFFSETX">
            <summary>
            Defines the x-offset to be used for shadows. Default is 2.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.SHADOW_OFFSETY">
            <summary>
            Defines the y-offset to be used for shadows. Default is 3.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.W3C_SHADOWCOLOR">
            <summary>
            Defines the color to be used to draw shadows in W3C standards. Default
            is gray.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.ENTITY_SEGMENT">
            <summary>
            Defines the length of the horizontal segment of an Entity Relation.
            This can be overridden using mxConstants.STYLE_SEGMENT style.
            Default is 30.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.RECTANGLE_ROUNDING_FACTOR">
            <summary>
            Defines the rounding factor for rounded rectangles in percent between
            0 and 1. Values should be smaller than 0.5. Default is 0.15.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.LINE_ARCSIZE">
            <summary>
            Defines the size of the arcs for rounded edges. Default is 10.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.ARROW_SPACING">
            <summary>
            Defines the spacing between the arrow shape and its terminals. Default
            is 10.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.ARROW_WIDTH">
            <summary>
            Defines the width of the arrow shape. Default is 30.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.ARROW_SIZE">
            <summary>
            Defines the size of the arrowhead in the arrow shape. Default is 30.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.NONE">
            <summary>
            Defines the value for none. Default is "none".
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_PERIMETER">
            <summary>
            Defines the key for the perimeter style.
            Possible values are the functions defined
            in mxPerimeter.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_SOURCE_PORT">
            <summary>
            Defines the ID of the cell that should be used for computing the
            perimeter point of the source for an edge. This allows for graphically
            connecting to a cell while keeping the actual terminal of the edge.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_TARGET_PORT">
            <summary>
            Defines the ID of the cell that should be used for computing the
            perimeter point of the target for an edge. This allows for graphically
            connecting to a cell while keeping the actual terminal of the edge.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_OPACITY">
            <summary>
            Defines the key for the opacity style (0-100).
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_TEXT_OPACITY">
            <summary>
            Defines the key for the text opacity style (0-100).
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_OVERFLOW">
            <summary>
            Defines the key for the overflow style. Possible values are "visible",
            "hidden" and "fill". The default value is "visible". This value
            specifies how overlapping vertex labels are handles. A value of
            "visible" will show the complete label. A value of "hidden" will clip
            the label so that it does not overlap the vertex bounds. A value of
            "fill" will use the vertex bounds for the label.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_ORTHOGONAL">
            <summary>
            Defines if the connection points on either end of the edge should be
            computed so that the edge is vertical or horizontal if possible and
            if the point is not at a fixed location. Default is false. This is
            used in mxGraph.IsOrthogonal, which also returns true if the edgeStyle
            of the edge is an elbow or entity.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_EXIT_X">
            <summary>
            Defines the key for the horizontal relative coordinate connection point
            of an edge with its source terminal.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_EXIT_Y">
            <summary>
            Defines the key for the vertical relative coordinate connection point
            of an edge with its source terminal.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_EXIT_PERIMETER">
            <summary>
            Defines if the perimeter should be used to find the exact entry point
            along the perimeter of the source. Possible values are 0 (false) and
            1 (true). Default is 1 (true).
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_ENTRY_X">
            <summary>
            Defines the key for the horizontal relative coordinate connection point
            of an edge with its target terminal.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_ENTRY_Y">
            <summary>
            Defines the key for the vertical relative coordinate connection point
            of an edge with its target terminal.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_ENTRY_PERIMETER">
            <summary>
            Defines if the perimeter should be used to find the exact entry point
            along the perimeter of the target. Possible values are 0 (false) and
            1 (true). Default is 1 (true).
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_WHITE_SPACE">
            <summary>
            Defines the key for the white-space style. Possible values are "nowrap"
            and "wrap". The default value is "nowrap". This value specifies how
            white-space inside a HTML vertex label should be handled. A value of
            "nowrap" means the text will never wrap to the next line until a
            linefeed is encountered. A value of "wrap" means text will wrap when
            necessary.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_ROTATION">
            <summary>
            Defines the key for the rotation style (0-360).
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_FILLCOLOR">
            <summary>
            Defines the key for the fillColor style. The value is a string
            expression supported by ColorTranslator.FromHtml.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_GRADIENTCOLOR">
            <summary>
            Defines the key for the gradientColor style. The value is a string
            expression supported by ColorTranslator.FromHtml. This is ignored
            if no fill color is defined.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_GRADIENT_DIRECTION">
            <summary>
            Defines the key for the gradient direction. Possible values are
            <i>DIRECTION_EAST</i>, <i>DIRECTION_WEST</i>,
            <i>DIRECTION_NORTH</i> and <i>DIRECTION_SOUTH</i>. Default
            is <i>DIRECTION_SOUTH</i>. Generally, and by default in mxGraph,
            gradient painting is done from the value of <i>STYLE_FILLCOLOR</i>
            to the value of <i>STYLE_GRADIENTCOLOR</i>. Taking the example of
            <i>DIRECTION_NORTH</i>, this means <i>STYLE_FILLCOLOR</i>
            color at the bottom of paint pattern and
            <i>STYLE_GRADIENTCOLOR</i> at top, with a gradient in-between.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_STROKECOLOR">
            <summary>
            Defines the key for the strokeColor style. The value is a string
            expression supported by ColorTranslator.FromHtml.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_SEPARATORCOLOR">
            <summary>
            Defines the key for the separatorColor style. The value is a string
            expression supported by ColorTranslator.FromHtml. This style is only
            used for SHAPE_SWIMLANE shapes.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_STROKEWIDTH">
            <summary>
            Defines the key for the strokeWidth style. The type of the value is
            <i>float</i> and the possible range is any non-negative value.
            The value reflects the stroke width in pixels.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_ALIGN">
            <summary>
            Defines the key for the align style. Possible values are
            <i>ALIGN_LEFT</i>, <i>ALIGN_CENTER</i> and
            <i>ALIGN_RIGHT</i>. This value defines how the lines of the label
            are horizontally aligned. <i>ALIGN_LEFT</i> mean label text lines
            are aligned to left of the label bounds, <i>ALIGN_RIGHT</i> to the
            right of the label bounds and <i>ALIGN_CENTER</i> means the
            center of the text lines are aligned in the center of the label bounds.
            Note this value doesn't affect the positioning of the overall label
            bounds relative to the vertex, to move the label bounds horizontally, use
            <i>STYLE_LABEL_POSITION</i>
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_VERTICAL_ALIGN">
            <summary>
            Defines the key for the verticalAlign style. Possible values are
            <i>ALIGN_TOP</i>, <i>ALIGN_MIDDLE</i> and
            <i>ALIGN_BOTTOM</i>. This value defines how the lines of the label
            are vertically aligned. <i>ALIGN_TOP</i> means the topmost label
            text line is aligned against the top of the label bounds,
            <i>ALIGN_BOTTOM</i> means the bottom-most label text line is
            aligned against the bottom of the label bounds and
            <i>ALIGN_MIDDLE</i> means there is equal spacing between the
            topmost text label line and the top of the label bounds and the
            bottom-most text label line and the bottom of the label bounds. Note
            this value doesn't affect the positioning of the overall label bounds
            relative to the vertex, to move the label bounds vertically, use
            <i>STYLE_VERTICAL_LABEL_POSITION</i>.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_LABEL_POSITION">
            <summary>
            Defines the key for the horizontal label position of vertices. Possible
            values are <i>ALIGN_LEFT</i>, <i>ALIGN_CENTER</i> and
            <i>ALIGN_RIGHT</i>. Default is <i>ALIGN_CENTER</i>. The
            label align defines the position of the label relative to the cell.
            <i>ALIGN_LEFT</i> means the entire label bounds is placed
            completely just to the left of the vertex, <i>ALIGN_RIGHT</i>
            means adjust to the right and <i>ALIGN_CENTER</i> means the label
            bounds are vertically aligned with the bounds of the vertex. Note this
            value doesn't affect the positioning of label within the label bounds,
            to move the label horizontally within the label bounds, use
            <i>STYLE_ALIGN</i>.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_VERTICAL_LABEL_POSITION">
            <summary>
            Defines the key for the vertical label position of vertices. Possible
            values are <i>ALIGN_TOP</i>, <i>ALIGN_BOTTOM</i> and
            <i>ALIGN_MIDDLE</i>. Default is <i>ALIGN_MIDDLE</i>. The
            label align defines the position of the label relative to the cell.
            <i>ALIGN_TOP</i> means the entire label bounds is placed
            completely just on the top of the vertex, <i>ALIGN_BOTTOM</i>
            means adjust on the bottom and <i>ALIGN_MIDDLE</i> means the label
            bounds are horizontally aligned with the bounds of the vertex. Note
            this value doesn't affect the positioning of label within the label
            bounds, to move the label vertically within the label bounds, use
            <i>STYLE_VERTICAL_ALIGN</i>.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_IMAGE_ALIGN">
            <summary>
            Defines the key for the align style. Possible values are
            <i>ALIGN_LEFT</i>, <i>ALIGN_CENTER</i> and
            <i>ALIGN_RIGHT</i>. The value defines how any image in the vertex
            label is aligned horizontally within the label bounds of a SHAPE_LABEL
            shape.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_IMAGE_VERTICAL_ALIGN">
            <summary>
            Defines the key for the verticalAlign style. Possible values are
            <i>ALIGN_TOP</i>, <i>ALIGN_MIDDLE</i> and
            <i>ALIGN_BOTTOM</i>. The value defines how any image in the vertex
            label is aligned vertically within the label bounds of a SHAPE_LABEL
            shape.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_GLASS">
            <summary>
            Defines the key for the glass style. Possible values are 0 (disabled) and
            1(enabled). The default value is 0. This is used in mxLabel.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_IMAGE">
            <summary>
            Defines the key for the image style. Possible values are any image URL,
            registered key in mxImageResources or short data URI as defined in
            mxImageBundle.
            The type of the value is <i>String</i>. This is the path to the
            image to image that is to be displayed within the label of a vertex. See
            mxGraphics2DCanvas.getImageForStyle, loadImage and setImageBasePath on
            how the image URL is resolved. Finally, mxUtils.loadImage is used for
            loading the image for a given URL.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_IMAGE_WIDTH">
            <summary>
            Defines the key for the imageWidth style. The type of this value is
            <i>int</i>, the value is the image width in pixels and must be
            greated than 0.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_IMAGE_HEIGHT">
            <summary>
            Defines the key for the imageHeight style The type of this value is
            <i>int</i>, the value is the image height in pixels and must be
            greater than 0.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_IMAGE_BACKGROUND">
            <summary>
            Defines the key for the image background color. This style is only used
            for image shapes. Possible values are all HTML color names or HEX codes.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_IMAGE_BORDER">
            <summary>
            Defines the key for the image border color. This style is only used for
            image shapes. Possible values are all HTML color names or HEX codes.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_IMAGE_FLIPH">
            <summary>
            Defines the key for the horizontal image flip. This style is only used
            in mxImageShape. Possible values are 0 and 1. Default is 0.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_IMAGE_FLIPV">
            <summary>
            Defines the key for the vertical image flip. This style is only used
            in mxImageShape. Possible values are 0 and 1. Default is 0.
            </summary>
        </member>
        <!-- 对于成员“F:com.mxgraph.mxConstants.STYLE_STENCIL_FLIPH”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:com.mxgraph.mxConstants.STYLE_STENCIL_FLIPV”忽略有格式错误的 XML 注释 -->
        <member name="F:com.mxgraph.mxConstants.STYLE_NOLABEL">
            <summary>
            Defines the key for the noLabel style. If this is true then no
            label is visible for a given cell. Possible values are true or
            false (1 or 0). Default is false (0).
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_NOEDGESTYLE">
            <summary>
            Defines the key for the noEdgeStyle style. If this is
            true then no edge style is applied for a given edge.
            Possible values are true or false (1 or 0).
            Default is false.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_LABEL_BACKGROUNDCOLOR">
            <summary>
            Defines the key for the label background color. The value is a string
            expression supported by ColorTranslator.FromHtml.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_LABEL_BORDERCOLOR">
            <summary>
            Defines the key for the label border color. The value is a string
            expression supported by ColorTranslator.FromHtml.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_INDICATOR_SHAPE">
            <summary>
            Defines the key for the indicatorShape style.
            Possible values are any of the SHAPE_*
            constants.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_INDICATOR_IMAGE">
            <summary>
            Defines the key for the indicatorImage style.
            Possible values are any image URL, the type of the value is
            <i>String</i>.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_INDICATOR_COLOR">
            <summary>
            Defines the key for the indicatorColor style. The value is a string
            expression supported by ColorTranslator.FromHtml.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_INDICATOR_GRADIENTCOLOR">
            <summary>
            Defines the key for the indicatorGradientColor style. The value is a
            string expression supported byColorTranslator.FromHtml. This style is
            only supported in SHAPE_LABEL shapes.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_INDICATOR_SPACING">
            <summary>
            Defines the key for the indicatorSpacing style (in px).
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_INDICATOR_WIDTH">
            <summary>
            Defines the key for the indicatorWidth style (in px).
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_INDICATOR_HEIGHT">
            <summary>
            Defines the key for the indicatorHeight style (in px).
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_SHADOW">
            <summary>
            Defines the key for the shadow style. The type of the value is
            <i>boolean</i>. This style applies to vertices and arrow style
            edges.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_SEGMENT">
            <summary>
            Defines the key for the segment style. The type of this value is
            <i>float</i> and the value represents the size of the horizontal
            segment of the entity relation style. Default is ENTITY_SEGMENT.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_ENDARROW">
            <summary>
            Defines the key for the endArrow style.
            Possible values are all constants in this
            class that start with ARROW_. This style is
            supported in the mxConnector shape.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_STARTARROW">
            <summary>
            Defines the key for the startArrow style.
            Possible values are all constants in this
            class that start with ARROW_.
            See STYLE_ENDARROW.
            This style is supported in the mxConnector shape.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_ENDSIZE">
            <summary>
            Defines the key for the endSize style. The type of this value is
            <i>float</i> and the value represents the size of the end
            marker in pixels.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_STARTSIZE">
            <summary>
            Defines the key for the startSize style. The type of this value is
            <i>float</i> and the value represents the size of the start marker
            or the size of the swimlane title region depending on the shape it is
            used for.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_DASHED">
            <summary>
            Defines the key for the dashed style. The type of this value is
            <i>boolean</i> and the value determines whether or not an edge or
            border is drawn with a dashed pattern along the line.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_ROUNDED">
            <summary>
            Defines the key for the rounded style. The type of this value is
            <i>boolean</i>. For edges this determines whether or not joins
            between edges segments are smoothed to a rounded finish. For vertices
            that have the rectangle shape, this determines whether or not the
            rectangle is rounded.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_SOURCE_PERIMETER_SPACING">
            <summary>
            Defines the key for the source perimeter spacing. The type of this value
            is <i>double</i>. This is the distance between the source connection
            point of an edge and the perimeter of the source vertex in pixels. This
            style only applies to edges.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_TARGET_PERIMETER_SPACING">
            <summary>
            Defines the key for the target perimeter spacing. The type of this value
            is <i>double</i>. This is the distance between the target connection
            point of an edge and the perimeter of the target vertex in pixels. This
            style only applies to edges.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_PERIMETER_SPACING">
            <summary>
            Defines the key for the perimeter spacing. This is the distance between
            the connection point and the perimeter in pixels. When used in a vertex
            style, this applies to all incoming edges to floating ports (edges that
            terminate on the perimeter of the vertex). When used in an edge style,
            this spacing applies to the source and target separately, if they
            terminate in floating ports (on the perimeter of the vertex).
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_SPACING">
            <summary>
            Defines the key for the spacing. The value represents the spacing, in
            pixels, added to each side of a label in a vertex (style applies to
            vertices only).
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_SPACING_TOP">
            <summary>
            Defines the key for the spacingTop style. The value represents the
            spacing, in pixels, added to the top side of a label in a vertex (style
            applies to vertices only).
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_SPACING_LEFT">
            <summary>
            Defines the key for the spacingLeft style. The value represents the
            spacing, in pixels, added to the left side of a label in a vertex (style
            applies to vertices only).
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_SPACING_BOTTOM">
            <summary>
            Defines the key for the spacingBottom style The value represents the
            spacing, in pixels, added to the bottom side of a label in a vertex
            (style applies to vertices only).
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_SPACING_RIGHT">
            <summary>
            Defines the key for the spacingRight style The value represents the
            spacing, in pixels, added to the right side of a label in a vertex (style
            applies to vertices only).
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_HORIZONTAL">
            <summary>
            Defines the key for the horizontal style. Possible values are
            <i>true</i> or <i>false</i>. This value only applies to
            vertices. If the <i>STYLE_SHAPE</i> is <i>SHAPE_SWIMLANE</i>
            a value of <i>false</i> indicates that the swimlane should be drawn
            vertically, <i>true</i> indicates to draw it horizontally. If the
            shape style does not indicate that this vertex is a swimlane, this value
            affects only whether the label is drawn horizontally or vertically.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_DIRECTION">
            <summary>
            Defines the key for the direction style. The direction style is used to
            specify the direction of certain shapes (eg. <i>mxTriangle</i>).
            Possible values are <i>DIRECTION_EAST</i> (default),
            <i>DIRECTION_WEST</i>, <i>DIRECTION_NORTH</i> and
            <i>DIRECTION_SOUTH</i>. This value only applies to vertices.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_ELBOW">
            <summary>
            Defines the key for the elbow style. Possible values are
            <i>ELBOW_HORIZONTAL</i> and <i>ELBOW_VERTICAL</i>. Default is
            <i>ELBOW_HORIZONTAL</i>. This defines how the three segment
            orthogonal edge style leaves its terminal vertices. The vertical style
            leaves the terminal vertices at the top and bottom sides.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_FONTCOLOR">
            <summary>
            Defines the key for the fontColor style. The value is type
            <i>String</i> and of the expression supported by
            ColorTranslator.FromHtml.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_FONTFAMILY">
            <summary>
            Defines the key for the fontFamily style. Possible values are names such
            as Arial; Dialog; Verdana; Times New Roman. The value is of type
            <i>String</i>.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_FONTSIZE">
            <summary>
            Defines the key for the fontSize style (in points). The type of the value
            is <i>int</i>.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_FONTSTYLE">
            <summary>
            Defines the key for the fontStyle style. Values may be any logical AND
            (sum) of FONT_BOLD, FONT_ITALIC, FONT_UNDERLINE and FONT_SHADOW. The type
            of the value is <i>int</i>.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_SHAPE">
            <summary>
            Defines the key for the shape style.
            Possible values are any of the SHAPE_*
            constants.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_EDGE">
            <summary>
            Takes a function that creates points. Possible values are the
            functions defined in mxEdgeStyle.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_LOOP">
            <summary>
            Defines the key for the loop style. Possible values are the
            functions defined in mxEdgeStyle.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_ROUTING_CENTER_X">
            <summary>
            Defines the key for the horizontal routing center. Possible values are
            between -0.5 and 0.5. This is the relative offset from the center used
            for connecting edges. The type of this value is <i>float</i>.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxConstants.STYLE_ROUTING_CENTER_Y">
            <summary>
            Defines the key for the vertical routing center. Possible values are
            between -0.5 and 0.5. This is the relative offset from the center used
            for connecting edges. The type of this value is <i>float</i>.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxCodecRegistry">
            <summary>
            Static class that acts as a global registry for codecs. See mxCodec for
            an example of using this class.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCodecRegistry.codecs">
            <summary>
            Maps from constructor names to codecs.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCodecRegistry.aliases">
            <summary>
            Maps from classnames to codecnames.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCodecRegistry.namespaces">
            <summary>
            Holds the list of known namespaces. Packages are used to prefix short
            class names (eg. mxCell) in XML markup.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCodecRegistry.Register(com.mxgraph.mxObjectCodec)">
            <summary>
            Registers a new codec and associates the name of the template constructor
            in the codec with the codec object. Automatically creates an alias if the
            codename and the classname are not equal.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCodecRegistry.AddAlias(System.String,System.String)">
            <summary>
            Adds an alias for mapping a classname to a codecname.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCodecRegistry.GetCodec(System.String)">
            <summary>
            Returns a codec that handles the given object, which can be an object
            instance or an XML node.
            </summary>
            <param name="name">C# type name.</param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxCodecRegistry.AddNamespace(System.String)">
            <summary>
            Adds the given namespace to the list of known namespaces.
            </summary>
            <param name="ns">Name of the namespace to be added.</param>
        </member>
        <member name="M:com.mxgraph.mxCodecRegistry.GetInstanceForName(System.String)">
            <summary>
            Creates and returns a new instance for the given class name.
            </summary>
            <param name="name">Name of the class to be instantiated.</param>
            <returns>Returns a new instance of the given class.</returns>
        </member>
        <member name="M:com.mxgraph.mxCodecRegistry.GetTypeForName(System.String)">
            <summary>
            Returns a class that corresponds to the given name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxCodecRegistry.GetName(System.Object)">
            <summary>
            Returns the name that identifies the codec associated
            with the given instance.
            The I/O system uses unqualified classnames, eg. for a
            com.mxgraph.model.mxCell this returns mxCell.
            </summary>
            <param name="instance">Instance whose node name should be returned.</param>
            <returns>Returns a string that identifies the codec.</returns>
        </member>
        <member name="T:com.mxgraph.mxImageBundle">
             <summary>
             Maps from keys to base64 encoded images or file locations. All values must
             be URLs or use the format data:image/format followed by a comma and the base64
             encoded image data, eg. "data:image/gif,XYZ", where XYZ is the base64 encoded
             image data.
             
             To add a new image bundle to an existing graph, the following code is used:
             
             mxImageBundle bundle = new mxImageBundle();
             bundle.PutImage("myImage", "data:image/gif,R0lGODlhEAAQAMIGAAAAAICAAICAgP" +
               "//AOzp2O3r2////////yH+FUNyZWF0ZWQgd2l0aCBUaGUgR0lNUAAh+QQBCgAHACwAAAAA" +
               "EAAQAAADTXi63AowynnAMDfjPUDlnAAJhmeBFxAEloliKltWmiYCQvfVr6lBPB1ggxN1hi" +
               "laSSASFQpIV5HJBDyHpqK2ejVRm2AAgZCdmCGO9CIBADs=");
             graph.AddImageBundle(bundle);
             
             The image can then be referenced in any cell style using image=myImage.
             
             To convert a given Image to a base64 encoded String, the following
             code can be used:
            
             MemoryStream ms = new System.IO.MemoryStream();
             image.Save(ms, System.Drawing.Imaging.ImageFormat.Gif);
             byte[] data = ms.ToArray();
             Console.WriteLine("base64="+Convert.ToBase64String(data));
             
             The value is decoded in mxUtils.LoadImage. The keys for images are
             resolved and the short format above is converted to a data URI in
             mxGraph.postProcessCellStyle.
             </summary>
        </member>
        <member name="F:com.mxgraph.mxImageBundle.images">
            <summary>
            Maps from keys to images.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxImageBundle.PutImage(System.String,System.String)">
            <summary>
            Adds the specified entry to the map.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxImageBundle.GetImage(System.String)">
            <summary>
            Returns the value for the given key.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxImageBundle.Images">
            <summary>
            Returns the images.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxCodec">
            <summary>
            XML codec for .NET object graphs. In order to resolve forward references
            when reading files the XML document that contains the data must be passed
            to the constructor.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCodec.document">
            <summary>
            Holds the owner document of the codec.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCodec.objects">
            <summary>
            Maps from IDs to objects.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCodec.encodeDefaults">
            <summary>
            Specifies if default values should be encoded. Default is false.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCodec.#ctor">
            <summary>
            Constructs an XML encoder/decoder with a new owner document.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCodec.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructs an XML encoder/decoder for the specified owner document. The document is
            required to resolve forward ID references. This means if you parse a graphmodel that
            is represented in XML you must also pass the document that contains the XML to the
            constructor, otherwise forward references will not be resolved.
            </summary>
            <param name="document">Optional XML document that contains the data. If no document
            is specified then a new document is created using mxUtils.createDocument</param>
        </member>
        <member name="M:com.mxgraph.mxCodec.PutObject(System.String,System.Object)">
            <summary>
            Assoiates the given object with the given ID.
            </summary>
            <param name="id">ID for the object to be associated with.</param>
            <param name="obj">Object to be associated with the ID.</param>
            <returns>Returns the given object.</returns>
        </member>
        <member name="M:com.mxgraph.mxCodec.GetObject(System.String)">
            <summary>
            Returns the decoded object for the element with the specified ID in
            document. If the object is not known then lookup is used to find an
            object. If no object is found, then the element with the respective ID
            from the document is parsed using decode.
            </summary>
            <param name="id">ID of the object to be returned.</param>
            <returns>Returns the object for the given ID.</returns>
        </member>
        <member name="M:com.mxgraph.mxCodec.Lookup(System.String)">
            <summary>
            Hook for subclassers to implement a custom lookup mechanism for cell IDs.
            This implementation always returns null.
            </summary>
            <param name="id">ID of the object to be returned.</param>
            <returns>Returns the object for the given ID.</returns>
        </member>
        <member name="M:com.mxgraph.mxCodec.GetElementById(System.String)">
            <summary>
            Returns the element with the given ID from the document.
            </summary>
            <param name="id">ID of the element to be returned.</param>
            <returns>Returns the element for the given ID.</returns>
        </member>
        <member name="M:com.mxgraph.mxCodec.GetElementById(System.String,System.String)">
            <summary>
            Returns the element with the given ID from document. The optional attr
            argument specifies the name of the ID attribute. Default is id. The
            XPath expression used to find the element is //*[\@id='arg'] where id
            is the name of the ID attribute (attributeName) and arg is the given id.
            </summary>
            <param name="id">ID of the element to be returned.</param>
            <param name="attributeName">Optional string for the attributename. Default is id.</param>
            <returns>Returns the element for the given ID.</returns>
        </member>
        <member name="M:com.mxgraph.mxCodec.GetId(System.Object)">
            <summary>
            Returns the ID of the specified object. This implementation calls
            reference first and if that returns null handles the object as an
            mxCell by returning their IDs using mxCell.getId. If no ID exists for
            the given cell, then an on-the-fly ID is generated using
            mxCellPath.create.
            </summary>
            <param name="obj">Object to return the ID for.</param>
            <returns>Returns the ID for the given object.</returns>
        </member>
        <member name="M:com.mxgraph.mxCodec.Reference(System.Object)">
            <summary>
            Hook for subclassers to implement a custom method for retrieving IDs from
            objects. This implementation always returns null.
            </summary>
            <param name="obj">Object whose ID should be returned.</param>
            <returns>Returns the ID for the given object.</returns>
        </member>
        <member name="M:com.mxgraph.mxCodec.Encode(System.Object)">
            <summary>
            Encodes the specified object and returns the resulting XML node.
            </summary>
            <param name="obj">Object to be encoded.</param>
            <returns>Returns an XML node that represents the given object.</returns>
        </member>
        <member name="M:com.mxgraph.mxCodec.Decode(System.Xml.XmlNode)">
            <summary>
            Decodes the given XML node using decode(XmlNode, Object).
            </summary>
            <param name="node">XML node to be decoded.</param>
            <returns>Returns an object that represents the given node.</returns>
        </member>
        <member name="M:com.mxgraph.mxCodec.Decode(System.Xml.XmlNode,System.Object)">
            <summary>
            Decodes the given XML node. The optional "into" argument specifies an
            existing object to be used. If no object is given, then a new
            instance is created using the constructor from the codec.
            The function returns the passed in object or the new instance if no
            object was given.
            </summary>
            <param name="node">XML node to be decoded.</param>
            <param name="into">Optional object to be decodec into.</param>
            <returns>Returns an object that represents the given node.</returns>
        </member>
        <member name="M:com.mxgraph.mxCodec.EncodeCell(com.mxgraph.mxICell,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Encoding of cell hierarchies is built-into the core, but is a
            higher-level function that needs to be explicitely used by the
            respective object encoders (eg. mxModelCodec, mxChildChangeCodec
            and mxRootChangeCodec). This implementation writes the given cell
            and its children as a (flat) sequence into the given node. The
            children are not encoded if the optional includeChildren is false.
            The function is in charge of adding the result into the given node
            and has no return value.
            </summary>
            <param name="cell">mxCell to be encoded.</param>
            <param name="node">Parent XML node to add the encoded cell into.</param>
            <param name="includeChildren">Boolean indicating if the method should
            include all descendents</param>
        </member>
        <member name="M:com.mxgraph.mxCodec.DecodeCell(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Decodes cells that have been encoded using inversion, ie. where the
            user object is the enclosing node in the XML, and restores the group
            and graph structure in the cells. Returns a new mxCell instance
            that represents the given node.
            </summary>
            <param name="node">XML node that contains the cell data.</param>
            <param name="restoreStructures">Boolean indicating whether the graph
            structure should be restored by calling insert and insertEdge on the
            parent and terminals, respectively.
            </param>
            <returns>Graph cell that represents the given node.</returns>
        </member>
        <member name="M:com.mxgraph.mxCodec.InsertIntoGraph(com.mxgraph.mxICell)">
            <summary>
            Inserts the given cell into its parent and terminal cells.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:com.mxgraph.mxCodec.SetAttribute(System.Xml.XmlNode,System.String,System.Object)">
            <summary>
            Sets the attribute on the specified node to value. This is a
            helper method that makes sure the attribute and value arguments
            are not null.
            </summary>
            <param name="node">XML node to set the attribute for.</param>
            <param name="attribute">Attributename to be set.</param>
            <param name="value">New value of the attribute.</param>
        </member>
        <member name="P:com.mxgraph.mxCodec.Document">
            <summary>
            Sets or returns the owner document of the codec.
            </summary>
            <returns>Returns the owner document.</returns>
        </member>
        <member name="P:com.mxgraph.mxCodec.IsEncodeDefaults">
            <summary>
            Sets or returns if default values of member variables should be encoded.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxCodec.Objects">
            <summary>
            Returns the object lookup table.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxGraphModel">
            <summary>
            Implements a graph model. The graph model acts as a wrapper around the
            cells which are in charge of storing the actual graph datastructure.
            The model acts as a transactional wrapper with event notification for
            all changes, whereas the cells contain the atomic operations for
            updating the actual datastructure.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxIGraphModel">
            <summary>
            Defines the requirements for a graph model to be used with mxGraph.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.CloneCells(System.Object[],System.Boolean)">
            <summary>
            Returns an array of clones for the given array of cells.
            Depending on the value of includeChildren, a deep clone is created for
            each cell. Connections are restored based if the corresponding
            cell is contained in the passed in array.
            </summary>
            <param name="cells">Array of cells to be cloned.</param>
            <param name="includeChildren">Boolean indicating if the cells should be cloned
            with all descendants.</param>
            <returns>Returns a cloned array of cells.</returns>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.IsAncestor(System.Object,System.Object)">
            <summary>
            Returns true if the given parent is an ancestor of child.
            </summary>
            <param name="parent">Cell that specifies the parent.</param>
            <param name="child">Cell that specifies the child.</param>
            <returns>Returns true if child is an ancestor of parent.</returns>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.Contains(System.Object)">
            <summary>
            Returns true if the model contains the given cell.
            </summary>
            <param name="cell">Cell to be checked.</param>
            <returns>Returns true if the cell is in the model.</returns>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.GetParent(System.Object)">
            <summary>
            Returns the parent of the given cell.
            </summary>
            <param name="child">Cell whose parent should be returned.</param>
            <returns>Returns the parent of the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.Add(System.Object,System.Object,System.Int32)">
            <summary>
            Adds the specified child to the parent at the given index. If no index
            is specified then the child is appended to the parent's array of
            children.
            </summary>
            <param name="parent">Cell that specifies the parent to contain the child.</param>
            <param name="child">Cell that specifies the child to be inserted.</param>
            <param name="index">Integer that specifies the index of the child.</param>
            <returns>Returns the inserted child.</returns>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.Remove(System.Object)">
            <summary>
            Removes the specified cell from the model. This operation will remove
            the cell and all of its children from the model.
            </summary>
            <param name="parent">Cell that should be removed.</param>
            <returns>Returns the removed cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.GetChildCount(System.Object)">
            <summary>
            Returns the number of children in the given cell.
            </summary>
            <param name="cell">Cell whose number of children should be returned.</param>
            <returns>Returns the number of children in the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.GetChildAt(System.Object,System.Int32)">
            <summary>
            Returns the child of the given parent at the given index.
            </summary>
            <param name="parent">Cell that represents the parent.</param>
            <param name="index">Integer that specifies the index of the child to be
            returned.</param>
            <returns>Returns the child at index in parent.</returns>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.GetTerminal(System.Object,System.Boolean)">
            <summary>
            Returns the source or target terminal of the given edge depending on the
            value of the boolean parameter.
            </summary>
            <param name="edge">Cell that specifies the edge.</param>
            <param name="source">Boolean indicating which end of the edge should be
            returned.</param>
            <returns>Returns the source or target of the given edge.</returns>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.SetTerminal(System.Object,System.Object,System.Boolean)">
            <summary>
            Sets the source or target terminal of the given edge using.
            </summary>
            <param name="edge">Cell that specifies the edge.</param>
            <param name="terminal">Cell that specifies the new terminal.</param>
            <param name="source">Boolean indicating if the terminal is the new source or
            target terminal of the edge.</param>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.GetEdgeCount(System.Object)">
            <summary>
            Returns the number of distinct edges connected to the given cell.
            </summary>
            <param name="cell">Cell that represents the vertex.</param>
            <returns>Returns the number of edges connected to cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.GetEdgeAt(System.Object,System.Int32)">
            <summary>
            Returns the edge of cell at the given index.
            </summary>
            <param name="cell">Cell that specifies the vertex.</param>
            <param name="index">Integer that specifies the index of the edge to return.</param>
            <returns>Returns the edge at the given index.</returns>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.IsVertex(System.Object)">
            <summary>
            Returns true if the given cell is a vertex.
            </summary>
            <param name="cell">Cell that represents the possible vertex.</param>
            <returns>Returns true if the given cell is a vertex.</returns>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.IsEdge(System.Object)">
            <summary>
            Returns true if the given cell is an edge.
            </summary>
            <param name="cell">Cell that represents the possible edge.</param>
            <returns>Returns true if the given cell is an edge.</returns>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.IsConnectable(System.Object)">
            <summary>
            Returns true if the given cell is connectable.
            </summary>
            <param name="cell">Cell whose connectable state should be returned.</param>
            <returns>Returns the connectable state of the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.GetValue(System.Object)">
            <summary>
            Returns the user object of the given cell.
            </summary>
            <param name="cell">Cell whose user object should be returned.</param>
            <returns>Returns the user object of the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.SetValue(System.Object,System.Object)">
            <summary>
            Sets the user object of then given cell.
            </summary>
            <param name="cell">Cell whose user object should be changed.</param>
            <param name="value">Object that defines the new user object.</param>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.GetGeometry(System.Object)">
            <summary>
            Returns the geometry of the given cell.
            </summary>
            <param name="cell">Cell whose geometry should be returned.</param>
            <returns>Returns the geometry of the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.SetGeometry(System.Object,com.mxgraph.mxGeometry)">
            <summary>
            Sets the geometry of the given cell.
            </summary>
            <param name="cell">Cell whose geometry should be changed.</param>
            <param name="geometry">Object that defines the new geometry.</param>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.GetStyle(System.Object)">
            <summary>
            Returns the style of the given cell.
            </summary>
            <param name="cell">Cell whose style should be returned.</param>
            <returns>Returns the style of the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.SetStyle(System.Object,System.String)">
            <summary>
            Sets the style of the given cell.
            </summary>
            <param name="cell">Cell whose style should be changed.</param>
            <param name="style">String of the form stylename[;key=value] to specify
            the new cell style.</param>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.IsCollapsed(System.Object)">
            <summary>
            Returns true if the given cell is collapsed.
            </summary>
            <param name="cell">Cell whose collapsed state should be returned.</param>
            <returns>Returns the collapsed state of the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.SetCollapsed(System.Object,System.Boolean)">
            <summary>
            Sets the collapsed state of the given cell.
            </summary>
            <param name="cell">Cell whose collapsed state should be changed.</param>
            <param name="collapsed">Boolean that specifies the new collpased state.</param>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.IsVisible(System.Object)">
            <summary>
            Returns true if the given cell is visible.
            </summary>
            <param name="cell">Cell whose visible state should be returned.</param>
            <returns>Returns the visible state of the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.SetVisible(System.Object,System.Boolean)">
            <summary>
            Sets the visible state of the given cell.
            </summary>
            <param name="cell">Cell whose visible state should be changed.</param>
            <param name="visible">Boolean that specifies the new visible state.</param>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.BeginUpdate">
            <summary>
            Increments the updateLevel by one. The event notification is queued
            until updateLevel reaches 0 by use of endUpdate.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxIGraphModel.EndUpdate">
            <summary>
            Decrements the updateLevel by one and fires a notification event if the
            updateLevel reaches 0.
            </summary>
        </member>
        <member name="E:com.mxgraph.mxIGraphModel.GraphModelChange">
            <summary>
            Called when the graph model has changed.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxIGraphModel.Root">
            <summary>
            Holds the root cell.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraphModel.root">
            <summary>
            Holds the root cell, which in turn contains the cells that represent the
            layers of the diagram as child cells. That is, the actual element of the
            diagram are supposed to live in the third generation of cells and below.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraphModel.cells">
            <summary>
            Maps from Ids to cells.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraphModel.createIds">
            <summary>
            Specifies if edges should automatically be moved into the nearest common
            ancestor of their terminals. Default is true.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraphModel.maintainEdgeParent">
            <summary>
            Specifies if the parent of edges should be automatically change to point
            to the nearest common ancestor of its terminals. Default is true.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraphModel.nextId">
            <summary>
            Specifies the next Id to be created. Initial value is 0.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxGraphModel.updateLevel">
            <summary>
            Counter for the depth of nested transactions. Each call to beginUpdate
            increments this counter and each call to endUpdate decrements it. When
            the counter reaches 0, the transaction is closed and the respective
            events are fired. Initial value is 0.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.#ctor">
            <summary>
            Constructs a new empty graph model.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.#ctor(System.Object)">
            <summary>
            Constructs a new graph model. If no root is specified
            then a new root mxCell with a default layer is created.
            </summary>
            <param name="root">Cell that represents the root cell.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.Clear">
            <summary>
            Sets a new root using createRoot.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.CreateRoot">
            <summary>
            Creates a new root cell with a default layer (child 0).
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.GetCell(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.CloneCell(System.Object,System.Collections.Hashtable,System.Boolean)">
            <summary>
            Inner helper method for cloning cells recursively.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.RestoreClone(System.Object,System.Object,System.Collections.Hashtable)">
            <summary>
            Inner helper method for restoring the connections in
            a network of cloned cells.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.CellAdded(System.Object)">
            <summary>
            Invoked after a cell has been added to a parent. This recursively
            creates an Id for the new cell and/or resolves Id collisions.
            </summary>
            <param name="cell">Cell that has been added.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.CreateId(System.Object)">
            <summary>
            Creates a new Id for the given cell and increments the global counter
            for creating new Ids.
            </summary>
            <param name="cell">Cell for which a new Id should be created.</param>
            <returns>Returns a new Id for the given cell.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.Remove(System.Object)">
            <summary>
            see com.mxgraph.mxIGraphModel.Remove(Object)
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.CellRemoved(System.Object)">
            <summary>
            Invoked after a cell has been removed from the model. This recursively
            removes the cell from its terminals and removes the mapping from the Id
            to the cell.
            </summary>
            <param name="cell">Cell that has been removed.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.UpdateEdgeParents(System.Object)">
            <summary>
            Updates the parents of the edges connected to the given cell and all its
            descendants so that each edge is contained in the nearest common ancestor.
            </summary>
            <param name="cell">Cell whose edges should be checked and updated.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.UpdateEdgeParents(System.Object,System.Object)">
            <summary>
            Updates the parents of the edges connected to the given cell and all its
            descendants so that the edge is contained in the nearest-common-ancestor.
            </summary>
            <param name="cell">Cell whose edges should be checked and updated.</param>
            <param name="root">Root of the cell hierarchy that contains all cells.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.UpdateEdgeParent(System.Object,System.Object)">
            <summary>
            Inner helper method to update the parent of the specified edge to the
            nearest-common-ancestor of its two terminals.
            </summary>
            <param name="edge">Specifies the edge to be updated.</param>
            <param name="root">Current root of the model.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.GetOrigin(System.Object)">
            <summary>
            Returns the absolute, cummulated origin for the children inside the
            given parent.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.GetNearestCommonAncestor(System.Object,System.Object)">
            <summary>
            Returns the nearest common ancestor for the specified cells.
            </summary>
            <param name="cell1">Cell that specifies the first cell in the tree.</param>
            <param name="cell2">Cell that specifies the second cell in the tree.</param>
            <returns>Returns the nearest common ancestor of the given cells.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.GetEdgeCount(System.Object)">
            <summary>
            see com.mxgraph.mxIGraphModel.GetEdgeCount(Object)
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.GetEdgeAt(System.Object,System.Int32)">
            <summary>
            see com.mxgraph.mxIGraphModel.GetEdgeAt(Object, int)
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.IsVertex(System.Object)">
            <summary>
            see com.mxgraph.mxIGraphModel.IsVertex(Object)
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.IsEdge(System.Object)">
            <summary>
            see com.mxgraph.mxIGraphModel.IsEdge(Object)
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.IsConnectable(System.Object)">
            <summary>
            see com.mxgraph.mxIGraphModel.IsConnectable(Object)
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.GetValue(System.Object)">
            <summary>
            see com.mxgraph.mxIGraphModel.GetValue(Object)
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.SetValue(System.Object,System.Object)">
            <summary>
            see com.mxgraph.mxIGraphModel.SetValue(Object, Object)
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.GetGeometry(System.Object)">
            <summary>
            see com.mxgraph.mxIGraphModel.GetGeometry(Object)
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.SetGeometry(System.Object,com.mxgraph.mxGeometry)">
            <summary>
            see com.mxgraph.mxIGraphModel.SetGeometry(Object, mxGeometry)
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.GetStyle(System.Object)">
            <summary>
            see com.mxgraph.mxIGraphModel.GetStyle(Object)
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.SetStyle(System.Object,System.String)">
            <summary>
            see com.mxgraph.mxIGraphModel.SetStyle(Object, string)
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.IsVisible(System.Object)">
            <summary>
            see com.mxgraph.mxIGraphModel.IsVisible(Object)
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.SetVisible(System.Object,System.Boolean)">
            <summary>
            see com.mxgraph.mxIGraphModel.SetVisible(Object, bool)
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.IsCollapsed(System.Object)">
            <summary>
            see com.mxgraph.mxIGraphModel.IsCollapsed(Object)
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.SetCollapsed(System.Object,System.Boolean)">
            <summary>
            see com.mxgraph.mxIGraphModel.SetCollapsed(Object, bool)
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.BeginUpdate">
            <summary>
            see com.mxgraph.mxIGraphModel.BeginUpdate()
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.EndUpdate">
            <summary>
            see com.mxgraph.mxIGraphModel.EndUpdate()
            </summary>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.MergeChildren(com.mxgraph.mxICell,com.mxgraph.mxICell,System.Boolean)">
            <summary>
            Merges the children of the given cell into the given target cell inside
            this model. All cells are cloned unless there is a corresponding cell in
            the model with the same id, in which case the source cell is ignored and
            all edges are connected to the corresponding cell in this model. Edges
            are considered to have no identity and are always cloned unless the
            cloneAllEdges flag is set to false, in which case edges with the same
            id in the target model are reconnected to reflect the terminals of the
            source edges.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="cloneAllEdges"></param>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.MergeChildrenImpl(com.mxgraph.mxICell,com.mxgraph.mxICell,System.Boolean,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Clones the children of the source cell into the given target cell in
            this model and adds an entry to the mapping that maps from the source
            cell to the target cell with the same id or the clone of the source cell
            that was inserted into this model.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="cloneAllEdges"></param>
            <param name="mapping"></param>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.GetDirectedEdgeCount(com.mxgraph.mxIGraphModel,System.Object,System.Boolean)">
            <summary>
            Returns the number of incoming or outgoing edges.
            </summary>
            <param name="model">Graph model that contains the connection data.</param>
            <param name="cell">Cell whose edges should be counted.</param>
            <param name="outgoing">Boolean that specifies if the number of outgoing or
            incoming edges should be returned.</param>
            <returns>Returns the number of incoming or outgoing edges.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.GetDirectedEdgeCount(com.mxgraph.mxIGraphModel,System.Object,System.Boolean,System.Object)">
            <summary>
            Returns the number of incoming or outgoing edges, ignoring the given
            edge.
            </summary>
            <param name="model">Graph model that contains the connection data.</param>
            <param name="cell">Cell whose edges should be counted.</param>
            <param name="outgoing">Boolean that specifies if the number of outgoing or
            incoming edges should be returned.</param>
            <param name="ignoredEdge">Object that represents an edge to be ignored.</param>
            <returns>Returns the number of incoming or outgoing edges.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.GetEdges(com.mxgraph.mxIGraphModel,System.Object)">
            <summary>
            Returns all edges connected to this cell including loops.
            </summary>
            <param name="model">Model that contains the connection information</param>
            <param name="cell">Cell whose connections should be returned</param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.GetConnections(com.mxgraph.mxIGraphModel,System.Object)">
            <summary>
            Returns all edges connected to this cell without loops.
            </summary>
            <param name="model">Model that contains the connection information</param>
            <param name="cell">Cell whose connections should be returned</param>
            <returns>Returns the array of connected edges for the given cell</returns>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.GetIncomingEdges(com.mxgraph.mxIGraphModel,System.Object)">
            <summary>
            Returns the incoming edges of the given cell without loops.
            </summary>
            <param name="model">Graphmodel that contains the edges</param>
            <param name="cell">Cell whose incoming edges should be returned</param>
            <returns>Returns the incoming edges for the given cell</returns>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.GetOutgoingEdges(com.mxgraph.mxIGraphModel,System.Object)">
            <summary>
            Returns the outgoing edges of the given cell without loops.
            </summary>
            <param name="model">Graphmodel that contains the edges</param>
            <param name="cell">Cell whose outgoing edges should be returned</param>
            <returns>Returns the outgoing edges for the given cell</returns>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.GetEdges(com.mxgraph.mxIGraphModel,System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns all distinct edges connected to this cell. If at least one of
            incoming or outgoing is true, then loops are ignored, otherwise if both
            are false, then all edges connected to the given cell are returned
            including loops.
            </summary>
            <param name="model">Model that contains the connection information</param>
            <param name="cell">Cell whose connections should be returned</param>
            <param name="incoming">Specifies if incoming edges should be returned</param>
            <param name="outgoing">Specifies if outgoing edges should be returned</param>
            <param name="includeLoops">Specifies if loops should be returned</param>
            <returns>Returns the array of connected edges for the given cell</returns>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.GetEdgesBetween(com.mxgraph.mxIGraphModel,System.Object,System.Object)">
            <summary>
            Returns all edges between the given source and target mxCells. If the
            optional boolean directed argument is false, then a matching edge is
            returned regardless of its direction.
            </summary>
            <param name="model"></param>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.GetEdgesBetween(com.mxgraph.mxIGraphModel,System.Object,System.Object,System.Boolean)">
            <summary>
            Returns all edges between the given source and target mxCells. If the
            optional boolean directed argument is false, then a matching edge is
            returned regardless of its direction.
            </summary>
            <param name="model">The graph model that contains the graph.</param>
            <param name="source">mxCell that defines the source terminal of the edge to be
            returned.</param>
            <param name="target">mxCell that defines the target terminal of the edge to be
            returned.</param>
            <param name="directed">Optional boolean that specifies if the direction of the
            edge should be taken into account. Default is true.</param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.GetOpposites(com.mxgraph.mxIGraphModel,System.Object[],System.Object,System.Boolean,System.Boolean)">
            <summary>
            Returns all opposite vertices wrt terminal for the given edges, only$
            returning sources and/or targets as specified. The result is returned as
            an array of mxCells.
            </summary>
            <param name="model">Model that contains the graph.</param>
            <param name="edges">Array of edges to be examined.</param>
            <param name="terminal">Cell that specifies the known end of the edges.</param>
            <param name="sources">Boolean that specifies if source terminals should
            be contained in the result. Default is true.</param>
            <param name="targets">Boolean that specifies if target terminals should
            be contained in the result. Default is true.</param>
            <returns>Returns the array of opposite terminals for the given edges.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.SetTerminals(com.mxgraph.mxIGraphModel,System.Object,System.Object,System.Object)">
            <summary>
            Sets the source and target of the given edge in a single atomic change.
            </summary>
            <param name="model">Model that contains the graph.</param>
            <param name="edge">Cell that specifies the edge.</param>
            <param name="source">Cell that specifies the new source terminal.</param>
            <param name="target">Cell that specifies the new target terminal.</param>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.getChildVertices(com.mxgraph.mxIGraphModel,System.Object)">
            <summary>
            Returns the child vertices of the given parent.
            </summary>
            <param name="model">Model that contains the hierarchical information.</param>
            <param name="parent">Cell whose child vertices should be returned.</param>
            <returns>Returns the child vertices of the given parent.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.getChildEdges(com.mxgraph.mxIGraphModel,System.Object)">
            <summary>
            Returns the child edges of the given parent.
            </summary>
            <param name="model">Model that contains the hierarchical information.</param>
            <param name="parent">Cell whose child edges should be returned.</param>
            <returns>Returns the child edges of the given parent.</returns>
        </member>
        <member name="M:com.mxgraph.mxGraphModel.getChildCells(com.mxgraph.mxIGraphModel,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Returns the children of the given cell that are vertices and/or edges
            depending on the arguments.
            </summary>
            <param name="model">Model that contains the hierarchical information.</param>
            <param name="parent">Cell whose child vertices or edges should be returned.</param>
            <param name="vertices">Boolean indicating if child vertices should be returned.</param>
            <param name="edges">Boolean indicating if child edges should be returned.</param>
            <returns>Returns the child vertices and/or edges of the given parent.</returns>
        </member>
        <member name="E:com.mxgraph.mxGraphModel.GraphModelChange">
            <summary>
            Fires when the graph model has changed.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGraphModel.IsMaintainEdgeParent">
            <summary>
            Sets of returns if edges should automatically be moved into the
            nearest common ancestor of their terminals.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxGraphModel.IsCreateIds">
            <summary>
            Sets or returns if the model automatically creates Ids and resolves Id
            collisions.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxEdgeStyleFunction">
            <summary>
            Defines the requirements for an edge style function.  At the time
            the function is called, the result array contains a placeholder (null)
            for the first absolute point, that is, the point where the edge and
            source terminal are connected. The implementation of the style then
            adds all intermediate waypoints except for the last point, that is,
            the connection point between the edge and the target terminal. The
            first ant the last point in the result array are then replaced with
            mxPoints that take into account the terminal's perimeter and next point
            on the edge.
            </summary>
            <param name="state">Cell state that represents the edge to be updated.</param>
            <param name="source">Cell state that represents the source terminal.</param>
            <param name="target">Cell state that represents the target terminal.</param>
            <param name="points">List of relative control points.</param>
            <param name="result">Array of points that represent the actual points of the
            edge.</param>
        </member>
        <member name="T:com.mxgraph.mxEdgeStyle">
            <summary>
            Provides various edge styles to be used as the values for
            mxConstants.STYLE_EDGE in a cell style.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxEdgeStyle.EntityRelation">
            <summary>
            Implements an entity relation style for edges (as used in database
            schema diagrams).
            </summary>
        </member>
        <member name="F:com.mxgraph.mxEdgeStyle.Loop">
            <summary>
            Implements a self-reference, aka. loop.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxEdgeStyle.ElbowConnector">
            <summary>
            Uses either SideToSide or TopToBottom depending on the horizontal
            flag in the cell style. SideToSide is used if horizontal is true or
            unspecified.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxEdgeStyle.SideToSide">
            <summary>
            Implements a vertical elbow edge.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxEdgeStyle.TopToBottom">
            <summary>
            Implements a horizontal elbow edge.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxUtils">
            <summary>
            Contains various helper methods for use with mxGraph.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetLabelSize(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)">
            <summary>
            Returns the size of the given label.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetLabelPaintBounds(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,com.mxgraph.mxPoint,com.mxgraph.mxRectangle,System.Double)">
            <summary>
            Returns the paint bounds for the given label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetScaledLabelBounds(System.Double,System.Double,com.mxgraph.mxRectangle,System.Double,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object},System.Double)">
            <summary>
            Returns the bounds for a label for the given location and size, taking
            into account the alignment and spacing in the specified style, as well
            as the width and height of the rectangle that contains the label.
            (For edge labels this width and height is 0.) The scale is used to scale
            the given size and the spacings in the specified style.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetSizeForString(System.String,System.Drawing.Font)">
            <summary>
            Returns the size of the given text.
            </summary>
            <param name="text">String whose size should be returned.</param>
            <param name="font">Specifies the font that should be used.</param>
            <returns>Returns the size of the given text.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetSizeForString(System.String,System.Drawing.Font,System.Int32)">
            <summary>
            Returns an mxRectangle with the size (width and height in pixels) of
            the given text.
            </summary>
            <param name="text">String whose size should be returned.</param>
            <param name="font">Specifies the font that should be used.</param>
            <param name="width">Specifies the width of the text block for word wrapping.</param>
            <returns>Returns the size of the given text.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.ToRadians(System.Double)">
            <summary>
            Converts the given degree to radians.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxUtils.ArcToCurves(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Converts the given arc to a series of curves.
            </summary>
            <param name="x0"></param>
            <param name="y0"></param>
            <param name="r1"></param>
            <param name="r2"></param>
            <param name="angle"></param>
            <param name="largeArcFlag"></param>
            <param name="sweepFlag"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetBoundingBox(com.mxgraph.mxRectangle,System.Double)">
            <summary>
            Returns the bounding box of the rotated rectangle.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetRotatedPoint(com.mxgraph.mxPoint,System.Double,System.Double)">
            <summary>
            Rotates the given point by the given cos and sin.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetRotatedPoint(com.mxgraph.mxPoint,System.Double,System.Double,com.mxgraph.mxPoint)">
            <summary>
            Rotates the given point by the given cos and sin.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxUtils.FillClippedRect(System.Drawing.Graphics,System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="brush"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:com.mxgraph.mxUtils.CreateImage(System.Int32,System.Int32,System.Nullable{System.Drawing.Color})">
            <summary>
            Creates an image for the given parameters.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="background"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.TranslatePoints(System.Collections.Generic.List{com.mxgraph.mxPoint},System.Double,System.Double)">
            <summary>
            Creates a new list of new points obtained by translating the points in
            the given list by the given vector. Elements that are not mxPoints are
            added to the result as-is.
            </summary>
            <param name="pts"></param>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.Intersection(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the intersection of two lines as an mxPoint.
            </summary>
            <param name="x0">X-coordinate of the first line's startpoint.</param>
            <param name="y0">Y-coordinate of the first line's startpoint.</param>
            <param name="x1">X-coordinate of the first line's endpoint.</param>
            <param name="y1">Y-coordinate of the first line's endpoint.</param>
            <param name="x2">X-coordinate of the second line's startpoint.</param>
            <param name="y2">Y-coordinate of the second line's startpoint.</param>
            <param name="x3">X-coordinate of the second line's endpoint.</param>
            <param name="y3">Y-coordinate of the second line's endpoint.</param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetStylename(System.String)">
            <summary>
            Returns the stylename in a style of the form stylename[;key=value] or an
            empty string if the given style does not contain a stylename.
            </summary>
            <param name="style">String of the form stylename[;key=value].</param>
            <returns>Returns the stylename from the given formatted string.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetStylenames(System.String)">
            <summary>
            Returns the stylenames in a style of the form stylename[;key=value] or an
            empty array if the given style does not contain any stylenames.
            </summary>
            <param name="style">String of the form stylename[;stylename][;key=value].</param>
            <returns>Returns the stylename from the given formatted string.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.IndexOfStylename(System.String,System.String)">
            <summary>
            Returns the index of the given stylename in the given style. This
            returns -1 if the given stylename does not occur (as a stylename) in the
            given style, otherwise it returns the index of the first character.
            </summary>
            <param name="style"></param>
            <param name="stylename"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.AddStylename(System.String,System.String)">
            <summary>
            Adds the specified stylename to the given style if it does not already
            contain the stylename.
            </summary>
            <param name="style"></param>
            <param name="stylename"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.RemoveStylename(System.String,System.String)">
            <summary>
            Removes all occurrences of the specified stylename in the given style
            and returns the updated style.
            </summary>
            <param name="style"></param>
            <param name="stylename"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.RemoveAllStylenames(System.String)">
            <summary>
            Removes all stylenames from the given style and returns the updated
            style.
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.SetCellStyles(com.mxgraph.mxIGraphModel,System.Object[],System.String,System.String)">
            <summary>
            Assigns the value for the given key in the styles of the given cells, or
            removes the key from the styles if the value is null.
            </summary>
            <param name="model">Model to execute the transaction in.</param>
            <param name="cells">Array of cells to be updated.</param>
            <param name="key">Key of the style to be changed.</param>
            <param name="value">New value for the given key.</param>
        </member>
        <member name="M:com.mxgraph.mxUtils.SetStyle(System.String,System.String,System.String)">
            <summary>
            Adds or removes the given key, value pair to the style and returns the
            new style. If value is null or zero length then the key is removed from
            the style.
            </summary>
            <param name="style">String of the form stylename[;key=value].</param>
            <param name="key">Key of the style to be changed.</param>
            <param name="value">New value for the given key.</param>
            <returns>Returns the new style.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.SetCellStyleFlags(com.mxgraph.mxIGraphModel,System.Object[],System.String,System.Int32,System.Boolean)">
            <summary>
            Sets or toggles the flag bit for the given key in the cell's styles.
            If value is null then the flag is toggled.
            </summary>
            <param name="model">Model that contains the cells.</param>
            <param name="cells">Array of cells to change the style for.</param>
            <param name="key">Key of the style to be changed.</param>
            <param name="flag">Integer for the bit to be changed.</param>
            <param name="value">Optional boolean value for the flag.</param>
        </member>
        <member name="M:com.mxgraph.mxUtils.SetStyleFlag(System.String,System.String,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Sets or removes the given key from the specified style and returns the
            new style. If value is null then the flag is toggled.
            </summary>
            <param name="style">String of the form stylename[;key=value].</param>
            <param name="key">Key of the style to be changed.</param>
            <param name="flag">Integer for the bit to be changed.</param>
            <param name="value">Optional boolean value for the given flag.</param>
            <returns>Returns the new style.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.IsTrue(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Returns true if the dictionary contains true for the given key or
            false if no value is defined for the key.
            </summary>
            <param name="dict">Dictionary that contains the key, value pairs.</param>
            <param name="key">Key whose value should be returned.</param>
            <returns>Returns the boolean value for key in dict.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.IsTrue(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Boolean)">
            <summary>
            Returns true if the dictionary contains true for the given key or the
            given default value if no value is defined for the key.
            </summary>
            <param name="dict">Dictionary that contains the key, value pairs.</param>
            <param name="key">Key whose value should be returned.</param>
            <param name="defaultValue">Default value to return if the key is undefined.</param>
            <returns>Returns the boolean value for key in dict.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetInt(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Returns the value for key in dictionary as an int or 0 if no value is
            defined for the key.
            </summary>
            <param name="dict">Dictionary that contains the key, value pairs.</param>
            <param name="key">Key whose value should be returned.</param>
            <returns>Returns the integer value for key in dict.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetInt(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Int32)">
            <summary>
            Returns the value for key in dictionary as an int or the given default
            value if no value is defined for the key.
            </summary>
            <param name="dict">Dictionary that contains the key, value pairs.</param>
            <param name="key">Key whose value should be returned.</param>
            <param name="defaultValue">Default value to return if the key is undefined.</param>
            <returns>Returns the integer value for key in dict.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetFloat(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Returns the value for key in dictionary as a float or 0 if no value is
            defined for the key.
            </summary>
            <param name="dict">Dictionary that contains the key, value pairs.</param>
            <param name="key">Key whose value should be returned.</param>
            <returns>Returns the float value for key in dict.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetFloat(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Single)">
            <summary>
            Returns the value for key in dictionary as a float or the given default
            value if no value is defined for the key.
            </summary>
            <param name="dict">Dictionary that contains the key, value pairs.</param>
            <param name="key">Key whose value should be returned.</param>
            <param name="defaultValue">Default value to return if the key is undefined.</param>
            <returns>Returns the float value for key in dict.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetDouble(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Returns the value for key in dictionary as a double or 0 if no value is
            defined for the key.
            </summary>
            <param name="dict">Dictionary that contains the key, value pairs.</param>
            <param name="key">Key whose value should be returned.</param>
            <returns>Returns the double value for key in dict.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetDouble(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Double)">
            <summary>
            Returns the value for key in dictionary as a double or the given default
            value if no value is defined for the key.
            </summary>
            <param name="dict">Dictionary that contains the key, value pairs.</param>
            <param name="key">Key whose value should be returned.</param>
            <param name="defaultValue">Default value to return if the key is undefined.</param>
            <returns>Returns the double value for key in dict.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetString(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Returns the value for key in dictionary as a string or null if no value
            is defined for the key.
            </summary>
            <param name="dict">Dictionary that contains the key, value pairs.</param>
            <param name="key">Key whose value should be returned.</param>
            <returns>Returns the string value for key in dict.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetString(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Returns the value for key in dictionary as a string or the given default
            value if no value is defined for the key.
            </summary>
            <param name="dict">Dictionary that contains the key, value pairs.</param>
            <param name="key">Key whose value should be returned.</param>
            <param name="defaultValue">Default value to return if the key is undefined.</param>
            <returns>Returns the string value for key in dict.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetColor(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Returns the value for key in dictionary as a color or null if no value
            is defined for the key.
            </summary>
            <param name="dict">Dictionary that contains the key, value pairs.</param>
            <param name="key">Key whose value should be returned.</param>
            <returns>Returns the color value for key in dict.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetColor(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Nullable{System.Drawing.Color})">
            <summary>
            Returns the value for key in dictionary as a color or the given default
            value if no value is defined for the key.
            </summary>
            <param name="dict">Dictionary that contains the key, value pairs.</param>
            <param name="key">Key whose value should be returned.</param>
            <param name="defaultValue">Default value to return if the key is undefined.</param>
            <returns>Returns the color value for key in dict.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetFont(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            
            
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetFont(System.Collections.Generic.Dictionary{System.String,System.Object},System.Double)">
            <summary>
            
            </summary>
            <param name="style"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetStringFormat(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a new StringFormat object for the given style.
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.ReadFile(System.String)">
            <summary>
            Reads the given filename into a string.
            </summary>
            <param name="filename">Name of the file to be read.</param>
            <returns>Returns a string representing the file contents.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetMd5Hash(System.String)">
            <summary>
            Returns the Md5 hash for the given text.
            </summary>
            <param name="text">String whose Md5 hash should be returned.</param>
            <returns>Returns the Md5 hash for the given text.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.IsNode(System.Object,System.String)">
            <summary>
            Returns true if the given value is an XML node with the specified nodename.
            specified.
            </summary>
            <param name="value">Object that represents the value to be tested.</param>
            <param name="nodeName">String that specifies the node name.</param>
            <returns>Returns true if the node name of the user object is equal to the
            given type.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.IsNode(System.Object,System.String,System.String,System.String)">
            <summary>
            Returns true if the user object is an XML node with the specified type
            and and the optional attribute has the specified value or is not
            specified.
            </summary>
            <param name="value">Object that represents the value to be tested.</param>
            <param name="nodeName">String that specifies the node name.</param>
            <param name="attributeName">Optional attribute name to check.</param>
            <param name="attributeValue">Optional attribute value to check.</param>
            <returns>Returns true if the cell matches the given conditions.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.LoadImage(System.String)">
            <summary>
            Loads an image from the local filesystem, a data URI or any other URL.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxUtils.CreateDocument">
            <summary>
            Returns a new, empty DOM document.
            </summary>
            <returns>Returns a new DOM document.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.LoadDocument(System.String)">
            <summary>
            Returns a new DOM document for the given URI.
            </summary>
            <param name="uri">URI to parse into the document.</param>
            <returns>Returns a new DOM document for the given URI.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.ParseXml(System.String)">
            <summary>
            Returns a document that represents the given XML string.
            </summary>
            <param name="xml">String that contains the XML markup.</param>
            <returns>Returns an XML document.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.FindNode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Returns the first node where attr equals value.
            This implementation does not use XPath.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxUtils.SelectSingleNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns a single node that matches the given XPath expression.
            </summary>
            <param name="doc">Document that contains the nodes.</param>
            <param name="expression">XPath expression to be matched.</param>
            <returns>Returns a single node matching the given expression.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.Eval(System.String)">
            <summary>
            Evaluates a Java expression to a class member using mxCodecRegistry.
            The range of supported expressions is limited to static class
            members such as mxEdgeStyle.ElbowConnector.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.HtmlEntities(System.String)">
            <summary>
            Converts the ampersand, quote, prime, less-than and greater-than characters
            to their corresponding HTML entities in the given string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetXml(System.Xml.XmlNode)">
            <summary>
            Returns a string that represents the given node.
            </summary>
            <param name="node">Node to return the XML for.</param>
            <returns>Returns an XML string.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetPrettyXml(System.Xml.XmlNode)">
            <summary>
            Returns a pretty-printed XML string for the given node.
            </summary>
            <param name="node">Node to return the XML for.</param>
            <returns>Returns a formatted XML string.</returns>
        </member>
        <member name="M:com.mxgraph.mxUtils.GetXml(System.Xml.XmlNode,System.Xml.Formatting)">
            <summary>
            Returns a pretty-printed XML string for the given node.
            </summary>
            <param name="node">Node to return the XML for.</param>
            <param name="formatting">Formatting of the string to be returned.</param>
            <returns>Returns a formatted XML string.</returns>
        </member>
        <member name="T:com.mxgraph.mxGraphModelChangeEventHandler">
            <summary>
            Defines the requirements for an object that listens to a graph model.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxStencilRegistry.AddStencil(System.String,com.mxgraph.mxStencil)">
            <summary>
            Adds the given stencil.
            </summary>
            <param name="name"></param>
            <param name="stencil"></param>
        </member>
        <member name="M:com.mxgraph.mxStencilRegistry.GetStencil(System.String)">
            <summary>
            Returns the stencil for the given name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:com.mxgraph.mxCellState">
            <summary>
            Represents the current state of a cell in a given graph view.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCellState.view">
            <summary>
            Reference to the enclosing graph view.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCellState.cell">
            <summary>
            Reference to the cell that is represented by this state.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCellState.style">
            <summary>
            Contains an array of key, value pairs that represent the style of the
            cell.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCellState.origin">
            <summary>
            Holds the origin for all child cells.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCellState.absolutePoints">
            <summary>
            List of mxPoints that represent the absolute points of an edge.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCellState.absoluteOffset">
            <summary>
            Holds the absolute offset. For edges, this is the absolute coordinates
            of the label position. For vertices, this is the offset of the label
            relative to the top, left corner of the vertex.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCellState.terminalDistance">
            <summary>
            Caches the distance between the end points of an edge.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCellState.length">
            <summary>
            Caches the length of an edge.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCellState.segments">
            <summary>
            Array of numbers that represent the cached length of each segment of the
            edge.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCellState.labelBounds">
            <summary>
            Holds the rectangle which contains the label.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCellState.boundingBox">
            <summary>
            Holds the largest rectangle which contains all rendering for this cell.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCellState.#ctor">
            <summary>
            Constructs an empty cell state.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCellState.#ctor(com.mxgraph.mxGraphView,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Constructs a new object that represents the current state of the given
            cell in the specified view.
            </summary>
            <param name="view">Graph view that contains the state.</param>
            <param name="cell">Cell that this state represents.</param>
            <param name="style">Array of key, value pairs that constitute the style.</param>
        </member>
        <member name="M:com.mxgraph.mxCellState.AbsolutePointCount">
            <summary>
            Returns the number of absolute points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxCellState.GetPerimeterBounds">
            <summary>
            Returns the rectangle that should be used as the perimeter of the cell.
            This implementation adds the perimeter spacing to the rectangle
            defined by this cell state.
            </summary>
            <returns>Returns the rectangle that defines the perimeter.</returns>
        </member>
        <member name="M:com.mxgraph.mxCellState.GetPerimeterBounds(System.Double)">
            <summary>
            Returns the rectangle that should be used as the perimeter of the cell.
            </summary>
            <param name="border"></param>
            <returns>Returns the rectangle that defines the perimeter.</returns>
        </member>
        <member name="M:com.mxgraph.mxCellState.SetAbsoluteTerminalPoint(com.mxgraph.mxPoint,System.Boolean)">
            <summary>
            Sets the first or last point in the list of points depending on source.
            </summary>
            <param name="point">Point that represents the terminal point.</param>
            <param name="source">Boolean that specifies if the first or last point should
            be assigned.</param>
        </member>
        <member name="M:com.mxgraph.mxCellState.Clone">
            <summary>
            Returns a clone of this state where all members are deeply cloned
            except the view and cell references, which are copied with no
            cloning to the new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.mxgraph.mxCellState.View">
            <summary>
            Sets or returns the enclosing graph view.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxCellState.Cell">
            <summary>
            Sets or returns the cell that is represented by this state.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxCellState.Style">
            <summary>
            Sets or returns the cell style as a map of key, value pairs.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxCellState.Origin">
            <summary>
            Sets or returns the origin for the children.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxCellState.AbsolutePoints">
            <summary>
            Sets or returns the absolute points.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxCellState.AbsoluteOffset">
            <summary>
            Sets or returns the absolute offset.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxCellState.TerminalDistance">
            <summary>
            Sets or returns the terminal distance.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxCellState.Length">
            <summary>
            Sets or returns the length.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxCellState.Segments">
            <summary>
            Sets or returns the length of the segments.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxCellState.LabelBounds">
            <summary>
            Sets or returns the label bounds.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxCellState.BoundingBox">
            <summary>
            Sets or returns the bounding box.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxCell">
            <summary>
            Cells are the elements of the graph model. They represent the state
            of the groups, vertices and edges in a graph.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCell.id">
            <summary>
            Holds the Id. Default is null.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCell.value">
            <summary>
            Holds the user object. Default is null.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCell.geometry">
            <summary>
            Holds the geometry. Default is null.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCell.style">
            <summary>
            Holds the geometry. Default is null.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCell.vertex">
            <summary>
            Specifies whether the cell is a vertex. Default value is false.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCell.edge">
            <summary>
            Specifies whether the cell is an edge. Default value is false.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCell.connectable">
            <summary>
            Specifies whether the cell connectable. Default value is true.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCell.visible">
            <summary>
            Specifies whether the cell is visible. Default value is true.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCell.collapsed">
            <summary>
            Specifies whether the cell is collapsed. Default value is false.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCell.parent">
            <summary>
            Reference to the parent cell.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCell.source">
            <summary>
            Reference to the source terminal of an edge.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCell.target">
            <summary>
            Reference to the target terminal of an edge.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCell.children">
            <summary>
            Holds the child cells.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCell.edges">
            <summary>
            Holds the connected edges.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCell.#ctor">
            <summary>
            Constructs a new empty cell.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCell.#ctor(System.Object)">
            <summary>
            Constructs a new cell for the given value.
            </summary>
            <param name="value">Value that represents the user object.</param>
        </member>
        <member name="M:com.mxgraph.mxCell.#ctor(System.Object,com.mxgraph.mxGeometry,System.String)">
            <summary>
            Constructs a new cell for the given value, geometry and style.
            </summary>
            <param name="value">Value that represents the user object.</param>
            <param name="geometry">Geometry of the cell to be created.</param>
            <param name="style">Style of the cell to be created.</param>
        </member>
        <member name="M:com.mxgraph.mxCell.GetAttribute(System.String)">
            <summary>
            Returns the specified attribute from the user object if it is an XML
            node.
            </summary>
            <param name="name">Name of the attribute whose value should be returned.</param>
            <returns>Returns the value of the given attribute or null.</returns>
        </member>
        <member name="M:com.mxgraph.mxCell.GetAttribute(System.String,System.String)">
            <summary>
            Returns the specified attribute from the user object if it is an XML
            node.
            </summary>
            <param name="name">Name of the attribute whose value should be returned.</param>
            <param name="defaultValue">Default value to use if the attribute has no value.</param>
            <returns>Returns the value of the given attribute or defaultValue.</returns>
        </member>
        <member name="M:com.mxgraph.mxCell.SetAttribute(System.String,System.String)">
            <summary>
            Sets the specified attribute on the user object if it is an XML node.
            </summary>
            <param name="name">Name of the attribute whose value should be set.</param>
            <param name="value">New value of the attribute.</param>
        </member>
        <member name="P:com.mxgraph.mxCell.Source">
            <summary>
            Sets or returns the source terminal of the cell.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxCell.Target">
            <summary>
            Sets or returns the target terminal of the cell.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxCellRenderer">
            <summary>
            Class that can draw an independent array of cells.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCellRenderer.DrawCells(com.mxgraph.mxGraph,System.Object[],System.Double,com.mxgraph.mxRectangle,com.mxgraph.mxCellRenderer.CanvasFactory)">
            <summary>
            Draws the given cells using a Graphics2D canvas and returns the buffered image
            that represents the cells.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCellRenderer.CreateImage(com.mxgraph.mxGraph,System.Object[],System.Double,System.Nullable{System.Drawing.Color},System.Boolean,com.mxgraph.mxRectangle)">
            <summary>
            Creates an image for the given arguments.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCellRenderer.CreateImage(com.mxgraph.mxGraph,System.Object[],System.Double,System.Nullable{System.Drawing.Color},System.Boolean,com.mxgraph.mxRectangle,com.mxgraph.mxGdiCanvas)">
            <summary>
            Creates an image for the given arguments.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxCellRenderer.CanvasFactory">
            <summary>
            Defines the requirements for a class that can create canvases.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCellRenderer.CanvasFactory.CreateCanvas(System.Int32,System.Int32)">
            <summary>
            Returns a new canvas for the given dimension.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxCellRenderer.ImageCanvasFactory">
            <summary>
            FIXME: Use anonymous class in CreateImage with invocation parameters
            in factory method code.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCellRenderer.ImageCanvasFactory.graphicsCanvas">
            <summary>
            Holds the graphics canvas to be used for painting.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCellRenderer.ImageCanvasFactory.background">
            <summary>
            Specifies the background color.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxCellRenderer.ImageCanvasFactory.antiAlias">
            <summary>
            Specifies if antialiasing should be enabled.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCellRenderer.ImageCanvasFactory.#ctor(com.mxgraph.mxGdiCanvas,System.Nullable{System.Drawing.Color},System.Boolean)">
            <summary>
            Constructs a new image canvas factors.
            </summary>
            <param name="graphicsCanvas">Specifies the graphics canvas for painting.</param>
            <param name="background">Specifies the background color of the image.</param>
            <param name="antiAlias">Specifies if antialiasing should be enabled.</param>
        </member>
        <member name="T:com.mxgraph.mxImageCanvas">
            <summary>
            Implements a canvas that draws onto an image.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxImageCanvas.canvas">
            <summary>
            Inner canvas used for the actual rendering.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxImageCanvas.previousGraphics">
            <summary>
            Stores the previous graphics reference of the inner canvas.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxImageCanvas.image">
            <summary>
            Stores the image that holds the graphics.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxImageCanvas.#ctor(com.mxgraph.mxGdiCanvas,System.Int32,System.Int32,System.Nullable{System.Drawing.Color},System.Boolean)">
            <summary>
            
            </summary>
            <param name="canvas"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="background"></param>
            <param name="antiAlias"></param>
        </member>
        <member name="M:com.mxgraph.mxImageCanvas.DrawCell(com.mxgraph.mxCellState)">
            <summary>
            see com.mxgraph.mxICanvas.DrawCell()
            </summary>
        </member>
        <member name="M:com.mxgraph.mxImageCanvas.DrawLabel(System.String,com.mxgraph.mxCellState,System.Boolean)">
            <summary>
            see com.mxgraph.mxICanvas.DrawLabel()
            </summary>
        </member>
        <member name="M:com.mxgraph.mxImageCanvas.Destroy">
            <summary>
            Destroys this canvas and all allocated resources.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxImageCanvas.GdiCanvas">
            <summary>
            Returns the inner canvas.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxImageCanvas.Image">
            <summary>
            Returns the image that hold the graphics.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxImageCanvas.Translate">
            <summary>
            see com.mxgraph.mxICanvas.Translate
            </summary>
        </member>
        <member name="P:com.mxgraph.mxImageCanvas.Scale">
            <summary>
            see com.mxgraph.mxICanvas.Translate
            </summary>
        </member>
        <member name="T:com.mxgraph.mxFastOrganicLayout">
            <summary>
            Fast organic layout algorithm.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxIGraphLayout">
            <summary>
            Defines the requirements for an object that implements a graph layout.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxIGraphLayout.execute(System.Object)">
            <summary>
            Executes the layout for the children of the specified parent.
            </summary>
            <param name="parent">Parent cell that contains the children to be layed out.</param>
        </member>
        <member name="M:com.mxgraph.mxIGraphLayout.move(System.Object,System.Double,System.Double)">
            <summary>
            Notified when a cell is being moved in a parent that has automatic
            layout to update the cell state (eg. index) so that the outcome of the
            layout will position the vertex as close to the point (x, y) as
            possible.
            </summary>
            <param name="cell">Cell which is being moved.</param>
            <param name="x">X-coordinate of the new cell location.</param>
            <param name="y">Y-coordinate of the new cell location.</param>
        </member>
        <member name="F:com.mxgraph.mxFastOrganicLayout.graph">
            <summary>
            Holds the enclosing graph.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxFastOrganicLayout.forceConstant">
            <summary>
            The force constant by which the attractive forces are divided and the
            replusive forces are multiple by the square of. The value equates to the
            average radius there is of free space around each node. Default is 50.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxFastOrganicLayout.forceConstantSquared">
            <summary>
            Cache of forceConstant^2 for performance.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxFastOrganicLayout.minDistanceLimit">
            <summary>
            Minimal distance limit. Default is 2. Prevents of
            dividing by zero.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxFastOrganicLayout.minDistanceLimitSquared">
            <summary>
            Cached version of minDistanceLimit squared.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxFastOrganicLayout.initialTemp">
            <summary>
            Start value of temperature. Default is 200.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxFastOrganicLayout.temperature">
            <summary>
            Temperature to limit displacement at later stages of layout.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxFastOrganicLayout.maxIterations">
            <summary>
            Total number of iterations to run the layout though.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxFastOrganicLayout.iteration">
            <summary>
            Current iteration count.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxFastOrganicLayout.vertexArray">
            <summary>
            An array of all vertices to be laid out.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxFastOrganicLayout.dispX">
            <summary>
            An array of locally stored X co-ordinate displacements for the vertices.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxFastOrganicLayout.dispY">
            <summary>
            An array of locally stored Y co-ordinate displacements for the vertices.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxFastOrganicLayout.cellLocation">
            <summary>
            An array of locally stored co-ordinate positions for the vertices.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxFastOrganicLayout.radius">
            <summary>
            The approximate radius of each cell, nodes only.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxFastOrganicLayout.radiusSquared">
            <summary>
            The approximate radius squared of each cell, nodes only.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxFastOrganicLayout.isMoveable">
            <summary>
            Array of booleans representing the movable states of the vertices.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxFastOrganicLayout.neighbours">
            <summary>
            Local copy of cell neighbours.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxFastOrganicLayout.allowedToRun">
            <summary>
            Boolean flag that specifies if the layout is allowed to run. If this is
            set to false, then the layout exits in the following iteration.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxFastOrganicLayout.indices">
            <summary>
            Maps from vertices to indices.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxFastOrganicLayout.random">
            <summary>
            Random number generator.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxFastOrganicLayout.#ctor(com.mxgraph.mxGraph)">
            <summary>
            Constructs a new fast organic layout for the specified graph.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:com.mxgraph.mxFastOrganicLayout.IsCellIgnored(System.Object)">
            <summary>
            Returns true if the given cell should be ignored by the layout algorithm.
            This implementation returns false if the cell is a vertex and has at least
            one connected edge.
            </summary>
            <param name="cell">Object that represents the cell.</param>
            <returns>Returns true if the given cell should be ignored.</returns>
        </member>
        <member name="M:com.mxgraph.mxFastOrganicLayout.reduceTemperature">
            <summary>
            Reduces the temperature of the layout from an initial setting in a linear
            fashion to zero.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxFastOrganicLayout.move(System.Object,System.Double,System.Double)">
            <summary>
            Notified when a cell is being moved in a parent
            that has automatic layout to update the cell
            state (eg. index) so that the outcome of the
            layou will position the vertex as close to the
            point (x, y) as possible.
            
            Not yet implemented.
            </summary>
            <param name="cell"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:com.mxgraph.mxFastOrganicLayout.execute(System.Object)">
            <summary>
            Executes the fast organic layout.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:com.mxgraph.mxFastOrganicLayout.calcPositions">
            <summary>
            Takes the displacements calculated for each cell and applies them to the
            local cache of cell positions. Limits the displacement to the current
            temperature.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxFastOrganicLayout.calcAttraction">
            <summary>
            Calculates the attractive forces between all laid out nodes linked by
            edges
            </summary>
        </member>
        <member name="M:com.mxgraph.mxFastOrganicLayout.calcRepulsion">
            <summary>
            Calculates the repulsive forces between all laid out nodes
            </summary>
        </member>
        <member name="P:com.mxgraph.mxFastOrganicLayout.IsAllowedToRun">
            <summary>
            Flag to stop a running layout run.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxFastOrganicLayout.MaxIterations">
            <summary>
            Maximum number of iterations.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxFastOrganicLayout.ForceConstant">
            <summary>
            Force constant to be used for the springs.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxFastOrganicLayout.MinDistanceLimit">
            <summary>
            Minimum distance between nodes.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxFastOrganicLayout.InitialTemp">
            <summary>
            Initial temperature.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxCellCodec">
            <summary>
            Codec for mxCells. This class is created and registered
            dynamically at load time and used implicitely via mxCodec
            and the mxCodecRegistry.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCellCodec.#ctor">
            <summary>
            Constructs a new cell codec.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCellCodec.#ctor(System.Object)">
            <summary>
            Constructs a new cell codec for the given template.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCellCodec.#ctor(System.Object,System.String[],System.String[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructs a new cell codec for the given arguments.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCellCodec.IsExcluded(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            Excludes user objects that are XML nodes.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCellCodec.AfterEncode(com.mxgraph.mxCodec,System.Object,System.Xml.XmlNode)">
            <summary>
            Encodes an mxCell and wraps the XML up inside the
            XML of the user object (inversion).
            </summary>
        </member>
        <member name="M:com.mxgraph.mxCellCodec.BeforeDecode(com.mxgraph.mxCodec,System.Xml.XmlNode,System.Object)">
            <summary>
            Decodes an mxCell and uses the enclosing XML node as
            the user object for the cell (inversion).
            </summary>
        </member>
        <member name="T:com.mxgraph.mxStencil">
            <summary>
            Implements a stencil for the given XML definition. This class implements the mxGraph
            stencil schema.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxStencil.desc">
            <summary>
            Holds the top-level node of the stencil definition.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxStencil.aspect">
            <summary>
            Holds the aspect of the shape. Default is "auto".
            </summary>
        </member>
        <member name="F:com.mxgraph.mxStencil.w0">
            <summary>
            Holds the width of the shape. Default is 100.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxStencil.h0">
            <summary>
            Holds the height of the shape. Default is 100.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxStencil.bgNode">
            <summary>
            Holds the XML node with the stencil description.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxStencil.fgNode">
            <summary>
            Holds the XML node with the stencil description.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxStencil.strokewidth">
            <summary>
            Holds the strokewidth direction from the description.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxStencil.lastMoveX">
            <summary>
            Holds the last x-position of the cursor.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxStencil.lastMoveY">
            <summary>
            Holds the last y-position of the cursor.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxStencil.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructs a new stencil for the given mxGraph shape description.
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:com.mxgraph.mxStencil.CreateCanvas(com.mxgraph.mxGdiCanvas)">
            <summary>
            Creates the canvas for rendering the stencil.
            </summary>
            <param name="gc"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxStencil.PaintShape(com.mxgraph.mxGdiCanvas,com.mxgraph.mxCellState)">
            <summary>
            Paints the stencil for the given state.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxStencil.DrawShadow(com.mxgraph.mxGdiCanvas2D,com.mxgraph.mxCellState,System.Double,System.Boolean,System.Boolean,com.mxgraph.mxRectangle,System.Double,System.Boolean)">
            <summary>
            Draws the shadow.
            </summary>
            <param name="canvas"></param>
            <param name="state"></param>
            <param name="rotation"></param>
            <param name="flipH"></param>
            <param name="flipV"></param>
            <param name="bounds"></param>
            <param name="alpha"></param>
        </member>
        <member name="M:com.mxgraph.mxStencil.DrawShape(com.mxgraph.mxGdiCanvas2D,com.mxgraph.mxCellState,com.mxgraph.mxRectangle,System.Boolean)">
            Draws this stencil inside the given bounds.
        </member>
        <member name="M:com.mxgraph.mxStencil.ComputeAspect(com.mxgraph.mxCellState,com.mxgraph.mxRectangle,System.String)">
            <summary>
            Returns a rectangle that contains the offset in x and y and the horizontal
            and vertical scale in width and height used to draw this shape inside the
            given rectangle.
            </summary>
            <param name="state"></param>
            <param name="bounds"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxStencil.DrawElement(com.mxgraph.mxGdiCanvas2D,com.mxgraph.mxCellState,System.Xml.XmlElement,com.mxgraph.mxRectangle)">
            <summary>
            Draws the given element.
            </summary>
            <param name="canvas"></param>
            <param name="state"></param>
            <param name="node"></param>
            <param name="aspect"></param>
        </member>
        <member name="M:com.mxgraph.mxStencil.GetInt(System.Xml.XmlElement,System.String,System.Int32)">
            <summary>
            Returns the given attribute or the default value.
            </summary>
            <param name="elt"></param>
            <param name="attribute"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxStencil.GetDouble(System.Xml.XmlElement,System.String)">
            <summary>
            Returns the given attribute or 0.
            </summary>
            <param name="elt"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxStencil.GetDouble(System.Xml.XmlElement,System.String,System.Double)">
            <summary>
            Returns the given attribute or the default value.
            </summary>
            <param name="elt"></param>
            <param name="attribute"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxStencil.GetString(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Returns the given attribute or the default value.
            </summary>
            <param name="elt"></param>
            <param name="attribute"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:com.mxgraph.mxStencil.ParseDescription">
            <summary>
            Parses the description of this shape.
            </summary>
        </member>
        <!-- 对于成员“M:com.mxgraph.mxStencil.EvaluateAttribute(System.Xml.XmlElement,System.String,com.mxgraph.mxCellState)”忽略有格式错误的 XML 注释 -->
        <member name="P:com.mxgraph.mxStencil.Description">
            <summary>
            Sets or returns the description.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxSaxOutputHandler.canvas">
            <summary>
            Holds the current canvas.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxSaxOutputHandler.handlers">
            <summary>
            Holds the handlers for specific XML nodes.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxSaxOutputHandler.#ctor(com.mxgraph.mxICanvas2D)">
            <summary>
            Constructs a new sax output handler for the given canvas.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxSaxOutputHandler.Read(System.Xml.XmlReader)">
            <summary>
            Reads the given display XML data and parses all elements.
            </summary>
            <param name="reader">Reader that represents the display XML data.</param>
        </member>
        <member name="M:com.mxgraph.mxSaxOutputHandler.ParseElement(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Parses the given element and paints it onto the canvas.
            </summary>
            <param name="tagName">Name of the node to be parsed.</param>
            <param name="attrs">Attributes of the node to be parsed.</param>
        </member>
        <member name="M:com.mxgraph.mxSaxOutputHandler.InitHandlers">
            <summary>
            
            </summary>
        </member>
        <member name="P:com.mxgraph.mxSaxOutputHandler.Canvas">
            <summary>
            Sets or returns the current canvas.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxSaxOutputHandler.ElementHandler">
            <summary>
            Defines the requirements for an object that parses a node.
            </summary>
        </member>
        <member name="T:com.mxgraph.mxSession">
            <summary>
            Implements a session that may be attached to a shared diagram.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxSession.DEFAULT_TIMEOUT">
            <summary>
            Default timeout is 10000 ms.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxSession.id">
            <summary>
            Holds the session ID.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxSession.diagram">
            <summary>
            Reference to the shared diagram.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxSession.buffer">
            <summary>
            Holds the send buffer for this session.
            </summary>
        </member>
        <member name="F:com.mxgraph.mxSession.lastTimeMillis">
            <summary>
            Holds the last active time millis.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxSession.#ctor(System.String,com.mxgraph.mxSharedDiagram)">
            <summary>
            Constructs a new session with the given ID.
            </summary>
            <param name="id">Specifies the session ID to be used.</param>
            <param name="diagram">Reference to the shared diagram.</param>
        </member>
        <member name="M:com.mxgraph.mxSession.Init">
            <summary>
            Initializes the session buffer and returns a string that represents the
            state of the session.
            </summary>
            <returns>Returns the initial state of the session.</returns>
        </member>
        <member name="M:com.mxgraph.mxSession.GetInitialMessage">
            <summary>
            Returns an XML string that represents the current state of the session
            and the shared diagram. A globally unique ID is used as the session's
            namespace, which is used on the client side to prefix IDs of newly
            created cells.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxSession.Receive(System.Xml.XmlNode)">
            <summary>
            Posts the change represented by the given XML string to the shared diagram.
            </summary>
            <param name="xml">XML string that represents the change.</param>
        </member>
        <member name="M:com.mxgraph.mxSession.Poll">
            <summary>
            Returns the changes received by other sessions for the shared diagram.
            The method returns an empty XML node if no change was received within
            10 seconds.
            </summary>
            <returns>Returns a string representing the changes to the shared diagram.</returns>
        </member>
        <member name="M:com.mxgraph.mxSession.Poll(System.Int32)">
            <summary>
            Returns the changes received by other sessions for the shared diagram.
            The method returns an empty XML node if no change was received within
            the given timeout.
            </summary>
            <param name="timeout">Time in milliseconds to wait for changes.</param>
            <returns>Returns a string representing the changes to the shared diagram.</returns>
        </member>
        <member name="M:com.mxgraph.mxSession.DiagramChanged(System.Object,System.String)">
            <summary>
            Invoked when the shared diagram has changed.
            </summary>
            <param name="sender">Session where the change was received from.</param>
            <param name="xml">XML string that represents the change.</param>
        </member>
        <member name="M:com.mxgraph.mxSession.InactiveTimeMillis">
            <summary>
            Returns the number of milliseconds this session has been inactive.
            </summary>
        </member>
        <member name="M:com.mxgraph.mxSession.Destroy">
            <summary>
            Destroys the session and removes its listener from the shared diagram.
            </summary>
        </member>
        <member name="P:com.mxgraph.mxSession.Id">
            <summary>
            Returns the session ID.
            </summary>
        </member>
    </members>
</doc>
